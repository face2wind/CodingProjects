// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "chat.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protocol {

namespace {

const ::google::protobuf::Descriptor* CSChatMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSChatMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* SCChatMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SCChatMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSCreateRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSCreateRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* SCCreateRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SCCreateRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSInvitePlayerIntoRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSInvitePlayerIntoRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSRequestIntoRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSRequestIntoRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSResponseInviteIntoRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSResponseInviteIntoRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSResponseRequestIntoRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSResponseRequestIntoRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* SCInviteIntoRoomList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SCInviteIntoRoomList_reflection_ = NULL;
const ::google::protobuf::Descriptor* SCRequestIntoRoomItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SCRequestIntoRoomItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* SCRequestIntoRoomList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SCRequestIntoRoomList_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSRoomChatMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSRoomChatMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* SCRoomChatMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SCRoomChatMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_chat_2eproto() {
  protobuf_AddDesc_chat_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "chat.proto");
  GOOGLE_CHECK(file != NULL);
  CSChatMessage_descriptor_ = file->message_type(0);
  static const int CSChatMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSChatMessage, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSChatMessage, chat_message_),
  };
  CSChatMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CSChatMessage_descriptor_,
      CSChatMessage::default_instance_,
      CSChatMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(CSChatMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSChatMessage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSChatMessage, _is_default_instance_));
  SCChatMessage_descriptor_ = file->message_type(1);
  static const int SCChatMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCChatMessage, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCChatMessage, chat_message_),
  };
  SCChatMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SCChatMessage_descriptor_,
      SCChatMessage::default_instance_,
      SCChatMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(SCChatMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCChatMessage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCChatMessage, _is_default_instance_));
  CSCreateRoom_descriptor_ = file->message_type(2);
  static const int CSCreateRoom_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCreateRoom, room_name_),
  };
  CSCreateRoom_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CSCreateRoom_descriptor_,
      CSCreateRoom::default_instance_,
      CSCreateRoom_offsets_,
      -1,
      -1,
      -1,
      sizeof(CSCreateRoom),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCreateRoom, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSCreateRoom, _is_default_instance_));
  SCCreateRoom_descriptor_ = file->message_type(3);
  static const int SCCreateRoom_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCCreateRoom, room_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCCreateRoom, room_id_),
  };
  SCCreateRoom_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SCCreateRoom_descriptor_,
      SCCreateRoom::default_instance_,
      SCCreateRoom_offsets_,
      -1,
      -1,
      -1,
      sizeof(SCCreateRoom),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCCreateRoom, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCCreateRoom, _is_default_instance_));
  CSInvitePlayerIntoRoom_descriptor_ = file->message_type(4);
  static const int CSInvitePlayerIntoRoom_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSInvitePlayerIntoRoom, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSInvitePlayerIntoRoom, player_id_),
  };
  CSInvitePlayerIntoRoom_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CSInvitePlayerIntoRoom_descriptor_,
      CSInvitePlayerIntoRoom::default_instance_,
      CSInvitePlayerIntoRoom_offsets_,
      -1,
      -1,
      -1,
      sizeof(CSInvitePlayerIntoRoom),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSInvitePlayerIntoRoom, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSInvitePlayerIntoRoom, _is_default_instance_));
  CSRequestIntoRoom_descriptor_ = file->message_type(5);
  static const int CSRequestIntoRoom_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRequestIntoRoom, room_id_),
  };
  CSRequestIntoRoom_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CSRequestIntoRoom_descriptor_,
      CSRequestIntoRoom::default_instance_,
      CSRequestIntoRoom_offsets_,
      -1,
      -1,
      -1,
      sizeof(CSRequestIntoRoom),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRequestIntoRoom, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRequestIntoRoom, _is_default_instance_));
  CSResponseInviteIntoRoom_descriptor_ = file->message_type(6);
  static const int CSResponseInviteIntoRoom_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSResponseInviteIntoRoom, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSResponseInviteIntoRoom, agree_),
  };
  CSResponseInviteIntoRoom_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CSResponseInviteIntoRoom_descriptor_,
      CSResponseInviteIntoRoom::default_instance_,
      CSResponseInviteIntoRoom_offsets_,
      -1,
      -1,
      -1,
      sizeof(CSResponseInviteIntoRoom),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSResponseInviteIntoRoom, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSResponseInviteIntoRoom, _is_default_instance_));
  CSResponseRequestIntoRoom_descriptor_ = file->message_type(7);
  static const int CSResponseRequestIntoRoom_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSResponseRequestIntoRoom, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSResponseRequestIntoRoom, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSResponseRequestIntoRoom, agree_),
  };
  CSResponseRequestIntoRoom_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CSResponseRequestIntoRoom_descriptor_,
      CSResponseRequestIntoRoom::default_instance_,
      CSResponseRequestIntoRoom_offsets_,
      -1,
      -1,
      -1,
      sizeof(CSResponseRequestIntoRoom),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSResponseRequestIntoRoom, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSResponseRequestIntoRoom, _is_default_instance_));
  SCInviteIntoRoomList_descriptor_ = file->message_type(8);
  static const int SCInviteIntoRoomList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCInviteIntoRoomList, room_id_),
  };
  SCInviteIntoRoomList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SCInviteIntoRoomList_descriptor_,
      SCInviteIntoRoomList::default_instance_,
      SCInviteIntoRoomList_offsets_,
      -1,
      -1,
      -1,
      sizeof(SCInviteIntoRoomList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCInviteIntoRoomList, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCInviteIntoRoomList, _is_default_instance_));
  SCRequestIntoRoomItem_descriptor_ = file->message_type(9);
  static const int SCRequestIntoRoomItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCRequestIntoRoomItem, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCRequestIntoRoomItem, player_id_),
  };
  SCRequestIntoRoomItem_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SCRequestIntoRoomItem_descriptor_,
      SCRequestIntoRoomItem::default_instance_,
      SCRequestIntoRoomItem_offsets_,
      -1,
      -1,
      -1,
      sizeof(SCRequestIntoRoomItem),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCRequestIntoRoomItem, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCRequestIntoRoomItem, _is_default_instance_));
  SCRequestIntoRoomList_descriptor_ = file->message_type(10);
  static const int SCRequestIntoRoomList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCRequestIntoRoomList, request_),
  };
  SCRequestIntoRoomList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SCRequestIntoRoomList_descriptor_,
      SCRequestIntoRoomList::default_instance_,
      SCRequestIntoRoomList_offsets_,
      -1,
      -1,
      -1,
      sizeof(SCRequestIntoRoomList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCRequestIntoRoomList, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCRequestIntoRoomList, _is_default_instance_));
  CSRoomChatMessage_descriptor_ = file->message_type(11);
  static const int CSRoomChatMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRoomChatMessage, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRoomChatMessage, chat_message_),
  };
  CSRoomChatMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CSRoomChatMessage_descriptor_,
      CSRoomChatMessage::default_instance_,
      CSRoomChatMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(CSRoomChatMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRoomChatMessage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRoomChatMessage, _is_default_instance_));
  SCRoomChatMessage_descriptor_ = file->message_type(12);
  static const int SCRoomChatMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCRoomChatMessage, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCRoomChatMessage, player_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCRoomChatMessage, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCRoomChatMessage, chat_message_),
  };
  SCRoomChatMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SCRoomChatMessage_descriptor_,
      SCRoomChatMessage::default_instance_,
      SCRoomChatMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(SCRoomChatMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCRoomChatMessage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCRoomChatMessage, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_chat_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CSChatMessage_descriptor_, &CSChatMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SCChatMessage_descriptor_, &SCChatMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CSCreateRoom_descriptor_, &CSCreateRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SCCreateRoom_descriptor_, &SCCreateRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CSInvitePlayerIntoRoom_descriptor_, &CSInvitePlayerIntoRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CSRequestIntoRoom_descriptor_, &CSRequestIntoRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CSResponseInviteIntoRoom_descriptor_, &CSResponseInviteIntoRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CSResponseRequestIntoRoom_descriptor_, &CSResponseRequestIntoRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SCInviteIntoRoomList_descriptor_, &SCInviteIntoRoomList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SCRequestIntoRoomItem_descriptor_, &SCRequestIntoRoomItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SCRequestIntoRoomList_descriptor_, &SCRequestIntoRoomList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CSRoomChatMessage_descriptor_, &CSRoomChatMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SCRoomChatMessage_descriptor_, &SCRoomChatMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_chat_2eproto() {
  delete CSChatMessage::default_instance_;
  delete CSChatMessage_reflection_;
  delete SCChatMessage::default_instance_;
  delete SCChatMessage_reflection_;
  delete CSCreateRoom::default_instance_;
  delete CSCreateRoom_reflection_;
  delete SCCreateRoom::default_instance_;
  delete SCCreateRoom_reflection_;
  delete CSInvitePlayerIntoRoom::default_instance_;
  delete CSInvitePlayerIntoRoom_reflection_;
  delete CSRequestIntoRoom::default_instance_;
  delete CSRequestIntoRoom_reflection_;
  delete CSResponseInviteIntoRoom::default_instance_;
  delete CSResponseInviteIntoRoom_reflection_;
  delete CSResponseRequestIntoRoom::default_instance_;
  delete CSResponseRequestIntoRoom_reflection_;
  delete SCInviteIntoRoomList::default_instance_;
  delete SCInviteIntoRoomList_reflection_;
  delete SCRequestIntoRoomItem::default_instance_;
  delete SCRequestIntoRoomItem_reflection_;
  delete SCRequestIntoRoomList::default_instance_;
  delete SCRequestIntoRoomList_reflection_;
  delete CSRoomChatMessage::default_instance_;
  delete CSRoomChatMessage_reflection_;
  delete SCRoomChatMessage::default_instance_;
  delete SCRoomChatMessage_reflection_;
}

void protobuf_AddDesc_chat_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nchat.proto\022\010protocol\"8\n\rCSChatMessage\022"
    "\021\n\tplayer_id\030\001 \001(\005\022\024\n\014chat_message\030\002 \001(\t"
    "\"8\n\rSCChatMessage\022\021\n\tplayer_id\030\001 \001(\005\022\024\n\014"
    "chat_message\030\003 \001(\t\"!\n\014CSCreateRoom\022\021\n\tro"
    "om_name\030\001 \001(\t\"2\n\014SCCreateRoom\022\021\n\troom_na"
    "me\030\001 \001(\t\022\017\n\007room_id\030\002 \001(\005\"<\n\026CSInvitePla"
    "yerIntoRoom\022\017\n\007room_id\030\001 \001(\005\022\021\n\tplayer_i"
    "d\030\002 \001(\005\"$\n\021CSRequestIntoRoom\022\017\n\007room_id\030"
    "\001 \001(\005\":\n\030CSResponseInviteIntoRoom\022\017\n\007roo"
    "m_id\030\001 \001(\005\022\r\n\005agree\030\002 \001(\005\"N\n\031CSResponseR"
    "equestIntoRoom\022\017\n\007room_id\030\001 \001(\005\022\021\n\tplaye"
    "r_id\030\002 \001(\005\022\r\n\005agree\030\003 \001(\005\"\'\n\024SCInviteInt"
    "oRoomList\022\017\n\007room_id\030\001 \003(\005\";\n\025SCRequestI"
    "ntoRoomItem\022\017\n\007room_id\030\001 \001(\005\022\021\n\tplayer_i"
    "d\030\002 \001(\005\"I\n\025SCRequestIntoRoomList\0220\n\007requ"
    "est\030\001 \003(\0132\037.protocol.SCRequestIntoRoomIt"
    "em\":\n\021CSRoomChatMessage\022\017\n\007room_id\030\001 \001(\005"
    "\022\024\n\014chat_message\030\002 \001(\t\"b\n\021SCRoomChatMess"
    "age\022\021\n\tplayer_id\030\001 \001(\005\022\023\n\013player_name\030\002 "
    "\001(\t\022\017\n\007room_id\030\003 \001(\005\022\024\n\014chat_message\030\004 \001"
    "(\tb\006proto3", 810);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "chat.proto", &protobuf_RegisterTypes);
  CSChatMessage::default_instance_ = new CSChatMessage();
  SCChatMessage::default_instance_ = new SCChatMessage();
  CSCreateRoom::default_instance_ = new CSCreateRoom();
  SCCreateRoom::default_instance_ = new SCCreateRoom();
  CSInvitePlayerIntoRoom::default_instance_ = new CSInvitePlayerIntoRoom();
  CSRequestIntoRoom::default_instance_ = new CSRequestIntoRoom();
  CSResponseInviteIntoRoom::default_instance_ = new CSResponseInviteIntoRoom();
  CSResponseRequestIntoRoom::default_instance_ = new CSResponseRequestIntoRoom();
  SCInviteIntoRoomList::default_instance_ = new SCInviteIntoRoomList();
  SCRequestIntoRoomItem::default_instance_ = new SCRequestIntoRoomItem();
  SCRequestIntoRoomList::default_instance_ = new SCRequestIntoRoomList();
  CSRoomChatMessage::default_instance_ = new CSRoomChatMessage();
  SCRoomChatMessage::default_instance_ = new SCRoomChatMessage();
  CSChatMessage::default_instance_->InitAsDefaultInstance();
  SCChatMessage::default_instance_->InitAsDefaultInstance();
  CSCreateRoom::default_instance_->InitAsDefaultInstance();
  SCCreateRoom::default_instance_->InitAsDefaultInstance();
  CSInvitePlayerIntoRoom::default_instance_->InitAsDefaultInstance();
  CSRequestIntoRoom::default_instance_->InitAsDefaultInstance();
  CSResponseInviteIntoRoom::default_instance_->InitAsDefaultInstance();
  CSResponseRequestIntoRoom::default_instance_->InitAsDefaultInstance();
  SCInviteIntoRoomList::default_instance_->InitAsDefaultInstance();
  SCRequestIntoRoomItem::default_instance_->InitAsDefaultInstance();
  SCRequestIntoRoomList::default_instance_->InitAsDefaultInstance();
  CSRoomChatMessage::default_instance_->InitAsDefaultInstance();
  SCRoomChatMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_chat_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_chat_2eproto {
  StaticDescriptorInitializer_chat_2eproto() {
    protobuf_AddDesc_chat_2eproto();
  }
} static_descriptor_initializer_chat_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int CSChatMessage::kPlayerIdFieldNumber;
const int CSChatMessage::kChatMessageFieldNumber;
#endif  // !_MSC_VER

CSChatMessage::CSChatMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.CSChatMessage)
}

void CSChatMessage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CSChatMessage::CSChatMessage(const CSChatMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.CSChatMessage)
}

void CSChatMessage::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  player_id_ = 0;
  chat_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CSChatMessage::~CSChatMessage() {
  // @@protoc_insertion_point(destructor:protocol.CSChatMessage)
  SharedDtor();
}

void CSChatMessage::SharedDtor() {
  chat_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CSChatMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSChatMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSChatMessage_descriptor_;
}

const CSChatMessage& CSChatMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chat_2eproto();
  return *default_instance_;
}

CSChatMessage* CSChatMessage::default_instance_ = NULL;

CSChatMessage* CSChatMessage::New(::google::protobuf::Arena* arena) const {
  CSChatMessage* n = new CSChatMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSChatMessage::Clear() {
  player_id_ = 0;
  chat_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CSChatMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.CSChatMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 player_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_chat_message;
        break;
      }

      // optional string chat_message = 2;
      case 2: {
        if (tag == 18) {
         parse_chat_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chat_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->chat_message().data(), this->chat_message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.CSChatMessage.chat_message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.CSChatMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.CSChatMessage)
  return false;
#undef DO_
}

void CSChatMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.CSChatMessage)
  // optional int32 player_id = 1;
  if (this->player_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player_id(), output);
  }

  // optional string chat_message = 2;
  if (this->chat_message().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chat_message().data(), this->chat_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.CSChatMessage.chat_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->chat_message(), output);
  }

  // @@protoc_insertion_point(serialize_end:protocol.CSChatMessage)
}

::google::protobuf::uint8* CSChatMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.CSChatMessage)
  // optional int32 player_id = 1;
  if (this->player_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player_id(), target);
  }

  // optional string chat_message = 2;
  if (this->chat_message().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chat_message().data(), this->chat_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.CSChatMessage.chat_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->chat_message(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:protocol.CSChatMessage)
  return target;
}

int CSChatMessage::ByteSize() const {
  int total_size = 0;

  // optional int32 player_id = 1;
  if (this->player_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->player_id());
  }

  // optional string chat_message = 2;
  if (this->chat_message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->chat_message());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSChatMessage::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CSChatMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CSChatMessage>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSChatMessage::MergeFrom(const CSChatMessage& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.player_id() != 0) {
    set_player_id(from.player_id());
  }
  if (from.chat_message().size() > 0) {

    chat_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chat_message_);
  }
}

void CSChatMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSChatMessage::CopyFrom(const CSChatMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSChatMessage::IsInitialized() const {

  return true;
}

void CSChatMessage::Swap(CSChatMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSChatMessage::InternalSwap(CSChatMessage* other) {
  std::swap(player_id_, other->player_id_);
  chat_message_.Swap(&other->chat_message_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSChatMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSChatMessage_descriptor_;
  metadata.reflection = CSChatMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSChatMessage

// optional int32 player_id = 1;
void CSChatMessage::clear_player_id() {
  player_id_ = 0;
}
 ::google::protobuf::int32 CSChatMessage::player_id() const {
  // @@protoc_insertion_point(field_get:protocol.CSChatMessage.player_id)
  return player_id_;
}
 void CSChatMessage::set_player_id(::google::protobuf::int32 value) {
  
  player_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.CSChatMessage.player_id)
}

// optional string chat_message = 2;
void CSChatMessage::clear_chat_message() {
  chat_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CSChatMessage::chat_message() const {
  // @@protoc_insertion_point(field_get:protocol.CSChatMessage.chat_message)
  return chat_message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CSChatMessage::set_chat_message(const ::std::string& value) {
  
  chat_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.CSChatMessage.chat_message)
}
 void CSChatMessage::set_chat_message(const char* value) {
  
  chat_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.CSChatMessage.chat_message)
}
 void CSChatMessage::set_chat_message(const char* value, size_t size) {
  
  chat_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.CSChatMessage.chat_message)
}
 ::std::string* CSChatMessage::mutable_chat_message() {
  
  // @@protoc_insertion_point(field_mutable:protocol.CSChatMessage.chat_message)
  return chat_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CSChatMessage::release_chat_message() {
  
  return chat_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CSChatMessage::set_allocated_chat_message(::std::string* chat_message) {
  if (chat_message != NULL) {
    
  } else {
    
  }
  chat_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chat_message);
  // @@protoc_insertion_point(field_set_allocated:protocol.CSChatMessage.chat_message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int SCChatMessage::kPlayerIdFieldNumber;
const int SCChatMessage::kChatMessageFieldNumber;
#endif  // !_MSC_VER

SCChatMessage::SCChatMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.SCChatMessage)
}

void SCChatMessage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SCChatMessage::SCChatMessage(const SCChatMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.SCChatMessage)
}

void SCChatMessage::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  player_id_ = 0;
  chat_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SCChatMessage::~SCChatMessage() {
  // @@protoc_insertion_point(destructor:protocol.SCChatMessage)
  SharedDtor();
}

void SCChatMessage::SharedDtor() {
  chat_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SCChatMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SCChatMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SCChatMessage_descriptor_;
}

const SCChatMessage& SCChatMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chat_2eproto();
  return *default_instance_;
}

SCChatMessage* SCChatMessage::default_instance_ = NULL;

SCChatMessage* SCChatMessage::New(::google::protobuf::Arena* arena) const {
  SCChatMessage* n = new SCChatMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SCChatMessage::Clear() {
  player_id_ = 0;
  chat_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SCChatMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.SCChatMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 player_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_chat_message;
        break;
      }

      // optional string chat_message = 3;
      case 3: {
        if (tag == 26) {
         parse_chat_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chat_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->chat_message().data(), this->chat_message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.SCChatMessage.chat_message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.SCChatMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.SCChatMessage)
  return false;
#undef DO_
}

void SCChatMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.SCChatMessage)
  // optional int32 player_id = 1;
  if (this->player_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player_id(), output);
  }

  // optional string chat_message = 3;
  if (this->chat_message().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chat_message().data(), this->chat_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.SCChatMessage.chat_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->chat_message(), output);
  }

  // @@protoc_insertion_point(serialize_end:protocol.SCChatMessage)
}

::google::protobuf::uint8* SCChatMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.SCChatMessage)
  // optional int32 player_id = 1;
  if (this->player_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player_id(), target);
  }

  // optional string chat_message = 3;
  if (this->chat_message().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chat_message().data(), this->chat_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.SCChatMessage.chat_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->chat_message(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:protocol.SCChatMessage)
  return target;
}

int SCChatMessage::ByteSize() const {
  int total_size = 0;

  // optional int32 player_id = 1;
  if (this->player_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->player_id());
  }

  // optional string chat_message = 3;
  if (this->chat_message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->chat_message());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCChatMessage::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SCChatMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SCChatMessage>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SCChatMessage::MergeFrom(const SCChatMessage& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.player_id() != 0) {
    set_player_id(from.player_id());
  }
  if (from.chat_message().size() > 0) {

    chat_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chat_message_);
  }
}

void SCChatMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCChatMessage::CopyFrom(const SCChatMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCChatMessage::IsInitialized() const {

  return true;
}

void SCChatMessage::Swap(SCChatMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SCChatMessage::InternalSwap(SCChatMessage* other) {
  std::swap(player_id_, other->player_id_);
  chat_message_.Swap(&other->chat_message_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SCChatMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SCChatMessage_descriptor_;
  metadata.reflection = SCChatMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SCChatMessage

// optional int32 player_id = 1;
void SCChatMessage::clear_player_id() {
  player_id_ = 0;
}
 ::google::protobuf::int32 SCChatMessage::player_id() const {
  // @@protoc_insertion_point(field_get:protocol.SCChatMessage.player_id)
  return player_id_;
}
 void SCChatMessage::set_player_id(::google::protobuf::int32 value) {
  
  player_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.SCChatMessage.player_id)
}

// optional string chat_message = 3;
void SCChatMessage::clear_chat_message() {
  chat_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SCChatMessage::chat_message() const {
  // @@protoc_insertion_point(field_get:protocol.SCChatMessage.chat_message)
  return chat_message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SCChatMessage::set_chat_message(const ::std::string& value) {
  
  chat_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.SCChatMessage.chat_message)
}
 void SCChatMessage::set_chat_message(const char* value) {
  
  chat_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.SCChatMessage.chat_message)
}
 void SCChatMessage::set_chat_message(const char* value, size_t size) {
  
  chat_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.SCChatMessage.chat_message)
}
 ::std::string* SCChatMessage::mutable_chat_message() {
  
  // @@protoc_insertion_point(field_mutable:protocol.SCChatMessage.chat_message)
  return chat_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SCChatMessage::release_chat_message() {
  
  return chat_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SCChatMessage::set_allocated_chat_message(::std::string* chat_message) {
  if (chat_message != NULL) {
    
  } else {
    
  }
  chat_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chat_message);
  // @@protoc_insertion_point(field_set_allocated:protocol.SCChatMessage.chat_message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CSCreateRoom::kRoomNameFieldNumber;
#endif  // !_MSC_VER

CSCreateRoom::CSCreateRoom()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.CSCreateRoom)
}

void CSCreateRoom::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CSCreateRoom::CSCreateRoom(const CSCreateRoom& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.CSCreateRoom)
}

void CSCreateRoom::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  room_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CSCreateRoom::~CSCreateRoom() {
  // @@protoc_insertion_point(destructor:protocol.CSCreateRoom)
  SharedDtor();
}

void CSCreateRoom::SharedDtor() {
  room_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CSCreateRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSCreateRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSCreateRoom_descriptor_;
}

const CSCreateRoom& CSCreateRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chat_2eproto();
  return *default_instance_;
}

CSCreateRoom* CSCreateRoom::default_instance_ = NULL;

CSCreateRoom* CSCreateRoom::New(::google::protobuf::Arena* arena) const {
  CSCreateRoom* n = new CSCreateRoom;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSCreateRoom::Clear() {
  room_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CSCreateRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.CSCreateRoom)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string room_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->room_name().data(), this->room_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.CSCreateRoom.room_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.CSCreateRoom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.CSCreateRoom)
  return false;
#undef DO_
}

void CSCreateRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.CSCreateRoom)
  // optional string room_name = 1;
  if (this->room_name().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_name().data(), this->room_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.CSCreateRoom.room_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->room_name(), output);
  }

  // @@protoc_insertion_point(serialize_end:protocol.CSCreateRoom)
}

::google::protobuf::uint8* CSCreateRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.CSCreateRoom)
  // optional string room_name = 1;
  if (this->room_name().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_name().data(), this->room_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.CSCreateRoom.room_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->room_name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:protocol.CSCreateRoom)
  return target;
}

int CSCreateRoom::ByteSize() const {
  int total_size = 0;

  // optional string room_name = 1;
  if (this->room_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->room_name());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSCreateRoom::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CSCreateRoom* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CSCreateRoom>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSCreateRoom::MergeFrom(const CSCreateRoom& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.room_name().size() > 0) {

    room_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.room_name_);
  }
}

void CSCreateRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSCreateRoom::CopyFrom(const CSCreateRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSCreateRoom::IsInitialized() const {

  return true;
}

void CSCreateRoom::Swap(CSCreateRoom* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSCreateRoom::InternalSwap(CSCreateRoom* other) {
  room_name_.Swap(&other->room_name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSCreateRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSCreateRoom_descriptor_;
  metadata.reflection = CSCreateRoom_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSCreateRoom

// optional string room_name = 1;
void CSCreateRoom::clear_room_name() {
  room_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CSCreateRoom::room_name() const {
  // @@protoc_insertion_point(field_get:protocol.CSCreateRoom.room_name)
  return room_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CSCreateRoom::set_room_name(const ::std::string& value) {
  
  room_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.CSCreateRoom.room_name)
}
 void CSCreateRoom::set_room_name(const char* value) {
  
  room_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.CSCreateRoom.room_name)
}
 void CSCreateRoom::set_room_name(const char* value, size_t size) {
  
  room_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.CSCreateRoom.room_name)
}
 ::std::string* CSCreateRoom::mutable_room_name() {
  
  // @@protoc_insertion_point(field_mutable:protocol.CSCreateRoom.room_name)
  return room_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CSCreateRoom::release_room_name() {
  
  return room_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CSCreateRoom::set_allocated_room_name(::std::string* room_name) {
  if (room_name != NULL) {
    
  } else {
    
  }
  room_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), room_name);
  // @@protoc_insertion_point(field_set_allocated:protocol.CSCreateRoom.room_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int SCCreateRoom::kRoomNameFieldNumber;
const int SCCreateRoom::kRoomIdFieldNumber;
#endif  // !_MSC_VER

SCCreateRoom::SCCreateRoom()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.SCCreateRoom)
}

void SCCreateRoom::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SCCreateRoom::SCCreateRoom(const SCCreateRoom& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.SCCreateRoom)
}

void SCCreateRoom::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  room_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  room_id_ = 0;
}

SCCreateRoom::~SCCreateRoom() {
  // @@protoc_insertion_point(destructor:protocol.SCCreateRoom)
  SharedDtor();
}

void SCCreateRoom::SharedDtor() {
  room_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SCCreateRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SCCreateRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SCCreateRoom_descriptor_;
}

const SCCreateRoom& SCCreateRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chat_2eproto();
  return *default_instance_;
}

SCCreateRoom* SCCreateRoom::default_instance_ = NULL;

SCCreateRoom* SCCreateRoom::New(::google::protobuf::Arena* arena) const {
  SCCreateRoom* n = new SCCreateRoom;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SCCreateRoom::Clear() {
  room_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  room_id_ = 0;
}

bool SCCreateRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.SCCreateRoom)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string room_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->room_name().data(), this->room_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.SCCreateRoom.room_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_room_id;
        break;
      }

      // optional int32 room_id = 2;
      case 2: {
        if (tag == 16) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.SCCreateRoom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.SCCreateRoom)
  return false;
#undef DO_
}

void SCCreateRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.SCCreateRoom)
  // optional string room_name = 1;
  if (this->room_name().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_name().data(), this->room_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.SCCreateRoom.room_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->room_name(), output);
  }

  // optional int32 room_id = 2;
  if (this->room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->room_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:protocol.SCCreateRoom)
}

::google::protobuf::uint8* SCCreateRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.SCCreateRoom)
  // optional string room_name = 1;
  if (this->room_name().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_name().data(), this->room_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.SCCreateRoom.room_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->room_name(), target);
  }

  // optional int32 room_id = 2;
  if (this->room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->room_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:protocol.SCCreateRoom)
  return target;
}

int SCCreateRoom::ByteSize() const {
  int total_size = 0;

  // optional string room_name = 1;
  if (this->room_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->room_name());
  }

  // optional int32 room_id = 2;
  if (this->room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->room_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCCreateRoom::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SCCreateRoom* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SCCreateRoom>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SCCreateRoom::MergeFrom(const SCCreateRoom& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.room_name().size() > 0) {

    room_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.room_name_);
  }
  if (from.room_id() != 0) {
    set_room_id(from.room_id());
  }
}

void SCCreateRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCCreateRoom::CopyFrom(const SCCreateRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCCreateRoom::IsInitialized() const {

  return true;
}

void SCCreateRoom::Swap(SCCreateRoom* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SCCreateRoom::InternalSwap(SCCreateRoom* other) {
  room_name_.Swap(&other->room_name_);
  std::swap(room_id_, other->room_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SCCreateRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SCCreateRoom_descriptor_;
  metadata.reflection = SCCreateRoom_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SCCreateRoom

// optional string room_name = 1;
void SCCreateRoom::clear_room_name() {
  room_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SCCreateRoom::room_name() const {
  // @@protoc_insertion_point(field_get:protocol.SCCreateRoom.room_name)
  return room_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SCCreateRoom::set_room_name(const ::std::string& value) {
  
  room_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.SCCreateRoom.room_name)
}
 void SCCreateRoom::set_room_name(const char* value) {
  
  room_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.SCCreateRoom.room_name)
}
 void SCCreateRoom::set_room_name(const char* value, size_t size) {
  
  room_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.SCCreateRoom.room_name)
}
 ::std::string* SCCreateRoom::mutable_room_name() {
  
  // @@protoc_insertion_point(field_mutable:protocol.SCCreateRoom.room_name)
  return room_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SCCreateRoom::release_room_name() {
  
  return room_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SCCreateRoom::set_allocated_room_name(::std::string* room_name) {
  if (room_name != NULL) {
    
  } else {
    
  }
  room_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), room_name);
  // @@protoc_insertion_point(field_set_allocated:protocol.SCCreateRoom.room_name)
}

// optional int32 room_id = 2;
void SCCreateRoom::clear_room_id() {
  room_id_ = 0;
}
 ::google::protobuf::int32 SCCreateRoom::room_id() const {
  // @@protoc_insertion_point(field_get:protocol.SCCreateRoom.room_id)
  return room_id_;
}
 void SCCreateRoom::set_room_id(::google::protobuf::int32 value) {
  
  room_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.SCCreateRoom.room_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CSInvitePlayerIntoRoom::kRoomIdFieldNumber;
const int CSInvitePlayerIntoRoom::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

CSInvitePlayerIntoRoom::CSInvitePlayerIntoRoom()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.CSInvitePlayerIntoRoom)
}

void CSInvitePlayerIntoRoom::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CSInvitePlayerIntoRoom::CSInvitePlayerIntoRoom(const CSInvitePlayerIntoRoom& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.CSInvitePlayerIntoRoom)
}

void CSInvitePlayerIntoRoom::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  room_id_ = 0;
  player_id_ = 0;
}

CSInvitePlayerIntoRoom::~CSInvitePlayerIntoRoom() {
  // @@protoc_insertion_point(destructor:protocol.CSInvitePlayerIntoRoom)
  SharedDtor();
}

void CSInvitePlayerIntoRoom::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSInvitePlayerIntoRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSInvitePlayerIntoRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSInvitePlayerIntoRoom_descriptor_;
}

const CSInvitePlayerIntoRoom& CSInvitePlayerIntoRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chat_2eproto();
  return *default_instance_;
}

CSInvitePlayerIntoRoom* CSInvitePlayerIntoRoom::default_instance_ = NULL;

CSInvitePlayerIntoRoom* CSInvitePlayerIntoRoom::New(::google::protobuf::Arena* arena) const {
  CSInvitePlayerIntoRoom* n = new CSInvitePlayerIntoRoom;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSInvitePlayerIntoRoom::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CSInvitePlayerIntoRoom*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(room_id_, player_id_);

#undef ZR_HELPER_
#undef ZR_

}

bool CSInvitePlayerIntoRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.CSInvitePlayerIntoRoom)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 room_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_player_id;
        break;
      }

      // optional int32 player_id = 2;
      case 2: {
        if (tag == 16) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.CSInvitePlayerIntoRoom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.CSInvitePlayerIntoRoom)
  return false;
#undef DO_
}

void CSInvitePlayerIntoRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.CSInvitePlayerIntoRoom)
  // optional int32 room_id = 1;
  if (this->room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->room_id(), output);
  }

  // optional int32 player_id = 2;
  if (this->player_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->player_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:protocol.CSInvitePlayerIntoRoom)
}

::google::protobuf::uint8* CSInvitePlayerIntoRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.CSInvitePlayerIntoRoom)
  // optional int32 room_id = 1;
  if (this->room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->room_id(), target);
  }

  // optional int32 player_id = 2;
  if (this->player_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->player_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:protocol.CSInvitePlayerIntoRoom)
  return target;
}

int CSInvitePlayerIntoRoom::ByteSize() const {
  int total_size = 0;

  // optional int32 room_id = 1;
  if (this->room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->room_id());
  }

  // optional int32 player_id = 2;
  if (this->player_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->player_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSInvitePlayerIntoRoom::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CSInvitePlayerIntoRoom* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CSInvitePlayerIntoRoom>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSInvitePlayerIntoRoom::MergeFrom(const CSInvitePlayerIntoRoom& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.room_id() != 0) {
    set_room_id(from.room_id());
  }
  if (from.player_id() != 0) {
    set_player_id(from.player_id());
  }
}

void CSInvitePlayerIntoRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSInvitePlayerIntoRoom::CopyFrom(const CSInvitePlayerIntoRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSInvitePlayerIntoRoom::IsInitialized() const {

  return true;
}

void CSInvitePlayerIntoRoom::Swap(CSInvitePlayerIntoRoom* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSInvitePlayerIntoRoom::InternalSwap(CSInvitePlayerIntoRoom* other) {
  std::swap(room_id_, other->room_id_);
  std::swap(player_id_, other->player_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSInvitePlayerIntoRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSInvitePlayerIntoRoom_descriptor_;
  metadata.reflection = CSInvitePlayerIntoRoom_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSInvitePlayerIntoRoom

// optional int32 room_id = 1;
void CSInvitePlayerIntoRoom::clear_room_id() {
  room_id_ = 0;
}
 ::google::protobuf::int32 CSInvitePlayerIntoRoom::room_id() const {
  // @@protoc_insertion_point(field_get:protocol.CSInvitePlayerIntoRoom.room_id)
  return room_id_;
}
 void CSInvitePlayerIntoRoom::set_room_id(::google::protobuf::int32 value) {
  
  room_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.CSInvitePlayerIntoRoom.room_id)
}

// optional int32 player_id = 2;
void CSInvitePlayerIntoRoom::clear_player_id() {
  player_id_ = 0;
}
 ::google::protobuf::int32 CSInvitePlayerIntoRoom::player_id() const {
  // @@protoc_insertion_point(field_get:protocol.CSInvitePlayerIntoRoom.player_id)
  return player_id_;
}
 void CSInvitePlayerIntoRoom::set_player_id(::google::protobuf::int32 value) {
  
  player_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.CSInvitePlayerIntoRoom.player_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CSRequestIntoRoom::kRoomIdFieldNumber;
#endif  // !_MSC_VER

CSRequestIntoRoom::CSRequestIntoRoom()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.CSRequestIntoRoom)
}

void CSRequestIntoRoom::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CSRequestIntoRoom::CSRequestIntoRoom(const CSRequestIntoRoom& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.CSRequestIntoRoom)
}

void CSRequestIntoRoom::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  room_id_ = 0;
}

CSRequestIntoRoom::~CSRequestIntoRoom() {
  // @@protoc_insertion_point(destructor:protocol.CSRequestIntoRoom)
  SharedDtor();
}

void CSRequestIntoRoom::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSRequestIntoRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSRequestIntoRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSRequestIntoRoom_descriptor_;
}

const CSRequestIntoRoom& CSRequestIntoRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chat_2eproto();
  return *default_instance_;
}

CSRequestIntoRoom* CSRequestIntoRoom::default_instance_ = NULL;

CSRequestIntoRoom* CSRequestIntoRoom::New(::google::protobuf::Arena* arena) const {
  CSRequestIntoRoom* n = new CSRequestIntoRoom;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSRequestIntoRoom::Clear() {
  room_id_ = 0;
}

bool CSRequestIntoRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.CSRequestIntoRoom)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 room_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.CSRequestIntoRoom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.CSRequestIntoRoom)
  return false;
#undef DO_
}

void CSRequestIntoRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.CSRequestIntoRoom)
  // optional int32 room_id = 1;
  if (this->room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->room_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:protocol.CSRequestIntoRoom)
}

::google::protobuf::uint8* CSRequestIntoRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.CSRequestIntoRoom)
  // optional int32 room_id = 1;
  if (this->room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->room_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:protocol.CSRequestIntoRoom)
  return target;
}

int CSRequestIntoRoom::ByteSize() const {
  int total_size = 0;

  // optional int32 room_id = 1;
  if (this->room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->room_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSRequestIntoRoom::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CSRequestIntoRoom* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CSRequestIntoRoom>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSRequestIntoRoom::MergeFrom(const CSRequestIntoRoom& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.room_id() != 0) {
    set_room_id(from.room_id());
  }
}

void CSRequestIntoRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSRequestIntoRoom::CopyFrom(const CSRequestIntoRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSRequestIntoRoom::IsInitialized() const {

  return true;
}

void CSRequestIntoRoom::Swap(CSRequestIntoRoom* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSRequestIntoRoom::InternalSwap(CSRequestIntoRoom* other) {
  std::swap(room_id_, other->room_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSRequestIntoRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSRequestIntoRoom_descriptor_;
  metadata.reflection = CSRequestIntoRoom_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSRequestIntoRoom

// optional int32 room_id = 1;
void CSRequestIntoRoom::clear_room_id() {
  room_id_ = 0;
}
 ::google::protobuf::int32 CSRequestIntoRoom::room_id() const {
  // @@protoc_insertion_point(field_get:protocol.CSRequestIntoRoom.room_id)
  return room_id_;
}
 void CSRequestIntoRoom::set_room_id(::google::protobuf::int32 value) {
  
  room_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.CSRequestIntoRoom.room_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CSResponseInviteIntoRoom::kRoomIdFieldNumber;
const int CSResponseInviteIntoRoom::kAgreeFieldNumber;
#endif  // !_MSC_VER

CSResponseInviteIntoRoom::CSResponseInviteIntoRoom()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.CSResponseInviteIntoRoom)
}

void CSResponseInviteIntoRoom::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CSResponseInviteIntoRoom::CSResponseInviteIntoRoom(const CSResponseInviteIntoRoom& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.CSResponseInviteIntoRoom)
}

void CSResponseInviteIntoRoom::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  room_id_ = 0;
  agree_ = 0;
}

CSResponseInviteIntoRoom::~CSResponseInviteIntoRoom() {
  // @@protoc_insertion_point(destructor:protocol.CSResponseInviteIntoRoom)
  SharedDtor();
}

void CSResponseInviteIntoRoom::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSResponseInviteIntoRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSResponseInviteIntoRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSResponseInviteIntoRoom_descriptor_;
}

const CSResponseInviteIntoRoom& CSResponseInviteIntoRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chat_2eproto();
  return *default_instance_;
}

CSResponseInviteIntoRoom* CSResponseInviteIntoRoom::default_instance_ = NULL;

CSResponseInviteIntoRoom* CSResponseInviteIntoRoom::New(::google::protobuf::Arena* arena) const {
  CSResponseInviteIntoRoom* n = new CSResponseInviteIntoRoom;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSResponseInviteIntoRoom::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CSResponseInviteIntoRoom*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(room_id_, agree_);

#undef ZR_HELPER_
#undef ZR_

}

bool CSResponseInviteIntoRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.CSResponseInviteIntoRoom)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 room_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_agree;
        break;
      }

      // optional int32 agree = 2;
      case 2: {
        if (tag == 16) {
         parse_agree:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &agree_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.CSResponseInviteIntoRoom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.CSResponseInviteIntoRoom)
  return false;
#undef DO_
}

void CSResponseInviteIntoRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.CSResponseInviteIntoRoom)
  // optional int32 room_id = 1;
  if (this->room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->room_id(), output);
  }

  // optional int32 agree = 2;
  if (this->agree() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->agree(), output);
  }

  // @@protoc_insertion_point(serialize_end:protocol.CSResponseInviteIntoRoom)
}

::google::protobuf::uint8* CSResponseInviteIntoRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.CSResponseInviteIntoRoom)
  // optional int32 room_id = 1;
  if (this->room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->room_id(), target);
  }

  // optional int32 agree = 2;
  if (this->agree() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->agree(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:protocol.CSResponseInviteIntoRoom)
  return target;
}

int CSResponseInviteIntoRoom::ByteSize() const {
  int total_size = 0;

  // optional int32 room_id = 1;
  if (this->room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->room_id());
  }

  // optional int32 agree = 2;
  if (this->agree() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->agree());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSResponseInviteIntoRoom::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CSResponseInviteIntoRoom* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CSResponseInviteIntoRoom>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSResponseInviteIntoRoom::MergeFrom(const CSResponseInviteIntoRoom& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.room_id() != 0) {
    set_room_id(from.room_id());
  }
  if (from.agree() != 0) {
    set_agree(from.agree());
  }
}

void CSResponseInviteIntoRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSResponseInviteIntoRoom::CopyFrom(const CSResponseInviteIntoRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSResponseInviteIntoRoom::IsInitialized() const {

  return true;
}

void CSResponseInviteIntoRoom::Swap(CSResponseInviteIntoRoom* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSResponseInviteIntoRoom::InternalSwap(CSResponseInviteIntoRoom* other) {
  std::swap(room_id_, other->room_id_);
  std::swap(agree_, other->agree_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSResponseInviteIntoRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSResponseInviteIntoRoom_descriptor_;
  metadata.reflection = CSResponseInviteIntoRoom_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSResponseInviteIntoRoom

// optional int32 room_id = 1;
void CSResponseInviteIntoRoom::clear_room_id() {
  room_id_ = 0;
}
 ::google::protobuf::int32 CSResponseInviteIntoRoom::room_id() const {
  // @@protoc_insertion_point(field_get:protocol.CSResponseInviteIntoRoom.room_id)
  return room_id_;
}
 void CSResponseInviteIntoRoom::set_room_id(::google::protobuf::int32 value) {
  
  room_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.CSResponseInviteIntoRoom.room_id)
}

// optional int32 agree = 2;
void CSResponseInviteIntoRoom::clear_agree() {
  agree_ = 0;
}
 ::google::protobuf::int32 CSResponseInviteIntoRoom::agree() const {
  // @@protoc_insertion_point(field_get:protocol.CSResponseInviteIntoRoom.agree)
  return agree_;
}
 void CSResponseInviteIntoRoom::set_agree(::google::protobuf::int32 value) {
  
  agree_ = value;
  // @@protoc_insertion_point(field_set:protocol.CSResponseInviteIntoRoom.agree)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CSResponseRequestIntoRoom::kRoomIdFieldNumber;
const int CSResponseRequestIntoRoom::kPlayerIdFieldNumber;
const int CSResponseRequestIntoRoom::kAgreeFieldNumber;
#endif  // !_MSC_VER

CSResponseRequestIntoRoom::CSResponseRequestIntoRoom()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.CSResponseRequestIntoRoom)
}

void CSResponseRequestIntoRoom::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CSResponseRequestIntoRoom::CSResponseRequestIntoRoom(const CSResponseRequestIntoRoom& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.CSResponseRequestIntoRoom)
}

void CSResponseRequestIntoRoom::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  room_id_ = 0;
  player_id_ = 0;
  agree_ = 0;
}

CSResponseRequestIntoRoom::~CSResponseRequestIntoRoom() {
  // @@protoc_insertion_point(destructor:protocol.CSResponseRequestIntoRoom)
  SharedDtor();
}

void CSResponseRequestIntoRoom::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSResponseRequestIntoRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSResponseRequestIntoRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSResponseRequestIntoRoom_descriptor_;
}

const CSResponseRequestIntoRoom& CSResponseRequestIntoRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chat_2eproto();
  return *default_instance_;
}

CSResponseRequestIntoRoom* CSResponseRequestIntoRoom::default_instance_ = NULL;

CSResponseRequestIntoRoom* CSResponseRequestIntoRoom::New(::google::protobuf::Arena* arena) const {
  CSResponseRequestIntoRoom* n = new CSResponseRequestIntoRoom;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSResponseRequestIntoRoom::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CSResponseRequestIntoRoom*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(room_id_, agree_);

#undef ZR_HELPER_
#undef ZR_

}

bool CSResponseRequestIntoRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.CSResponseRequestIntoRoom)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 room_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_player_id;
        break;
      }

      // optional int32 player_id = 2;
      case 2: {
        if (tag == 16) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_agree;
        break;
      }

      // optional int32 agree = 3;
      case 3: {
        if (tag == 24) {
         parse_agree:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &agree_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.CSResponseRequestIntoRoom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.CSResponseRequestIntoRoom)
  return false;
#undef DO_
}

void CSResponseRequestIntoRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.CSResponseRequestIntoRoom)
  // optional int32 room_id = 1;
  if (this->room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->room_id(), output);
  }

  // optional int32 player_id = 2;
  if (this->player_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->player_id(), output);
  }

  // optional int32 agree = 3;
  if (this->agree() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->agree(), output);
  }

  // @@protoc_insertion_point(serialize_end:protocol.CSResponseRequestIntoRoom)
}

::google::protobuf::uint8* CSResponseRequestIntoRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.CSResponseRequestIntoRoom)
  // optional int32 room_id = 1;
  if (this->room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->room_id(), target);
  }

  // optional int32 player_id = 2;
  if (this->player_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->player_id(), target);
  }

  // optional int32 agree = 3;
  if (this->agree() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->agree(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:protocol.CSResponseRequestIntoRoom)
  return target;
}

int CSResponseRequestIntoRoom::ByteSize() const {
  int total_size = 0;

  // optional int32 room_id = 1;
  if (this->room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->room_id());
  }

  // optional int32 player_id = 2;
  if (this->player_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->player_id());
  }

  // optional int32 agree = 3;
  if (this->agree() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->agree());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSResponseRequestIntoRoom::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CSResponseRequestIntoRoom* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CSResponseRequestIntoRoom>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSResponseRequestIntoRoom::MergeFrom(const CSResponseRequestIntoRoom& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.room_id() != 0) {
    set_room_id(from.room_id());
  }
  if (from.player_id() != 0) {
    set_player_id(from.player_id());
  }
  if (from.agree() != 0) {
    set_agree(from.agree());
  }
}

void CSResponseRequestIntoRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSResponseRequestIntoRoom::CopyFrom(const CSResponseRequestIntoRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSResponseRequestIntoRoom::IsInitialized() const {

  return true;
}

void CSResponseRequestIntoRoom::Swap(CSResponseRequestIntoRoom* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSResponseRequestIntoRoom::InternalSwap(CSResponseRequestIntoRoom* other) {
  std::swap(room_id_, other->room_id_);
  std::swap(player_id_, other->player_id_);
  std::swap(agree_, other->agree_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSResponseRequestIntoRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSResponseRequestIntoRoom_descriptor_;
  metadata.reflection = CSResponseRequestIntoRoom_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSResponseRequestIntoRoom

// optional int32 room_id = 1;
void CSResponseRequestIntoRoom::clear_room_id() {
  room_id_ = 0;
}
 ::google::protobuf::int32 CSResponseRequestIntoRoom::room_id() const {
  // @@protoc_insertion_point(field_get:protocol.CSResponseRequestIntoRoom.room_id)
  return room_id_;
}
 void CSResponseRequestIntoRoom::set_room_id(::google::protobuf::int32 value) {
  
  room_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.CSResponseRequestIntoRoom.room_id)
}

// optional int32 player_id = 2;
void CSResponseRequestIntoRoom::clear_player_id() {
  player_id_ = 0;
}
 ::google::protobuf::int32 CSResponseRequestIntoRoom::player_id() const {
  // @@protoc_insertion_point(field_get:protocol.CSResponseRequestIntoRoom.player_id)
  return player_id_;
}
 void CSResponseRequestIntoRoom::set_player_id(::google::protobuf::int32 value) {
  
  player_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.CSResponseRequestIntoRoom.player_id)
}

// optional int32 agree = 3;
void CSResponseRequestIntoRoom::clear_agree() {
  agree_ = 0;
}
 ::google::protobuf::int32 CSResponseRequestIntoRoom::agree() const {
  // @@protoc_insertion_point(field_get:protocol.CSResponseRequestIntoRoom.agree)
  return agree_;
}
 void CSResponseRequestIntoRoom::set_agree(::google::protobuf::int32 value) {
  
  agree_ = value;
  // @@protoc_insertion_point(field_set:protocol.CSResponseRequestIntoRoom.agree)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int SCInviteIntoRoomList::kRoomIdFieldNumber;
#endif  // !_MSC_VER

SCInviteIntoRoomList::SCInviteIntoRoomList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.SCInviteIntoRoomList)
}

void SCInviteIntoRoomList::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SCInviteIntoRoomList::SCInviteIntoRoomList(const SCInviteIntoRoomList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.SCInviteIntoRoomList)
}

void SCInviteIntoRoomList::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

SCInviteIntoRoomList::~SCInviteIntoRoomList() {
  // @@protoc_insertion_point(destructor:protocol.SCInviteIntoRoomList)
  SharedDtor();
}

void SCInviteIntoRoomList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SCInviteIntoRoomList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SCInviteIntoRoomList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SCInviteIntoRoomList_descriptor_;
}

const SCInviteIntoRoomList& SCInviteIntoRoomList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chat_2eproto();
  return *default_instance_;
}

SCInviteIntoRoomList* SCInviteIntoRoomList::default_instance_ = NULL;

SCInviteIntoRoomList* SCInviteIntoRoomList::New(::google::protobuf::Arena* arena) const {
  SCInviteIntoRoomList* n = new SCInviteIntoRoomList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SCInviteIntoRoomList::Clear() {
  room_id_.Clear();
}

bool SCInviteIntoRoomList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.SCInviteIntoRoomList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 room_id = 1;
      case 1: {
        if (tag == 8) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_room_id())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_room_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_room_id;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.SCInviteIntoRoomList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.SCInviteIntoRoomList)
  return false;
#undef DO_
}

void SCInviteIntoRoomList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.SCInviteIntoRoomList)
  // repeated int32 room_id = 1;
  if (this->room_id_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_room_id_cached_byte_size_);
  }
  for (int i = 0; i < this->room_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->room_id(i), output);
  }

  // @@protoc_insertion_point(serialize_end:protocol.SCInviteIntoRoomList)
}

::google::protobuf::uint8* SCInviteIntoRoomList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.SCInviteIntoRoomList)
  // repeated int32 room_id = 1;
  if (this->room_id_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _room_id_cached_byte_size_, target);
  }
  for (int i = 0; i < this->room_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->room_id(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:protocol.SCInviteIntoRoomList)
  return target;
}

int SCInviteIntoRoomList::ByteSize() const {
  int total_size = 0;

  // repeated int32 room_id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->room_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->room_id(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _room_id_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCInviteIntoRoomList::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SCInviteIntoRoomList* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SCInviteIntoRoomList>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SCInviteIntoRoomList::MergeFrom(const SCInviteIntoRoomList& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  room_id_.MergeFrom(from.room_id_);
}

void SCInviteIntoRoomList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCInviteIntoRoomList::CopyFrom(const SCInviteIntoRoomList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCInviteIntoRoomList::IsInitialized() const {

  return true;
}

void SCInviteIntoRoomList::Swap(SCInviteIntoRoomList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SCInviteIntoRoomList::InternalSwap(SCInviteIntoRoomList* other) {
  room_id_.UnsafeArenaSwap(&other->room_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SCInviteIntoRoomList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SCInviteIntoRoomList_descriptor_;
  metadata.reflection = SCInviteIntoRoomList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SCInviteIntoRoomList

// repeated int32 room_id = 1;
int SCInviteIntoRoomList::room_id_size() const {
  return room_id_.size();
}
void SCInviteIntoRoomList::clear_room_id() {
  room_id_.Clear();
}
 ::google::protobuf::int32 SCInviteIntoRoomList::room_id(int index) const {
  // @@protoc_insertion_point(field_get:protocol.SCInviteIntoRoomList.room_id)
  return room_id_.Get(index);
}
 void SCInviteIntoRoomList::set_room_id(int index, ::google::protobuf::int32 value) {
  room_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.SCInviteIntoRoomList.room_id)
}
 void SCInviteIntoRoomList::add_room_id(::google::protobuf::int32 value) {
  room_id_.Add(value);
  // @@protoc_insertion_point(field_add:protocol.SCInviteIntoRoomList.room_id)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SCInviteIntoRoomList::room_id() const {
  // @@protoc_insertion_point(field_list:protocol.SCInviteIntoRoomList.room_id)
  return room_id_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SCInviteIntoRoomList::mutable_room_id() {
  // @@protoc_insertion_point(field_mutable_list:protocol.SCInviteIntoRoomList.room_id)
  return &room_id_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int SCRequestIntoRoomItem::kRoomIdFieldNumber;
const int SCRequestIntoRoomItem::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

SCRequestIntoRoomItem::SCRequestIntoRoomItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.SCRequestIntoRoomItem)
}

void SCRequestIntoRoomItem::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SCRequestIntoRoomItem::SCRequestIntoRoomItem(const SCRequestIntoRoomItem& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.SCRequestIntoRoomItem)
}

void SCRequestIntoRoomItem::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  room_id_ = 0;
  player_id_ = 0;
}

SCRequestIntoRoomItem::~SCRequestIntoRoomItem() {
  // @@protoc_insertion_point(destructor:protocol.SCRequestIntoRoomItem)
  SharedDtor();
}

void SCRequestIntoRoomItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SCRequestIntoRoomItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SCRequestIntoRoomItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SCRequestIntoRoomItem_descriptor_;
}

const SCRequestIntoRoomItem& SCRequestIntoRoomItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chat_2eproto();
  return *default_instance_;
}

SCRequestIntoRoomItem* SCRequestIntoRoomItem::default_instance_ = NULL;

SCRequestIntoRoomItem* SCRequestIntoRoomItem::New(::google::protobuf::Arena* arena) const {
  SCRequestIntoRoomItem* n = new SCRequestIntoRoomItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SCRequestIntoRoomItem::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SCRequestIntoRoomItem*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(room_id_, player_id_);

#undef ZR_HELPER_
#undef ZR_

}

bool SCRequestIntoRoomItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.SCRequestIntoRoomItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 room_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_player_id;
        break;
      }

      // optional int32 player_id = 2;
      case 2: {
        if (tag == 16) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.SCRequestIntoRoomItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.SCRequestIntoRoomItem)
  return false;
#undef DO_
}

void SCRequestIntoRoomItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.SCRequestIntoRoomItem)
  // optional int32 room_id = 1;
  if (this->room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->room_id(), output);
  }

  // optional int32 player_id = 2;
  if (this->player_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->player_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:protocol.SCRequestIntoRoomItem)
}

::google::protobuf::uint8* SCRequestIntoRoomItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.SCRequestIntoRoomItem)
  // optional int32 room_id = 1;
  if (this->room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->room_id(), target);
  }

  // optional int32 player_id = 2;
  if (this->player_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->player_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:protocol.SCRequestIntoRoomItem)
  return target;
}

int SCRequestIntoRoomItem::ByteSize() const {
  int total_size = 0;

  // optional int32 room_id = 1;
  if (this->room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->room_id());
  }

  // optional int32 player_id = 2;
  if (this->player_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->player_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCRequestIntoRoomItem::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SCRequestIntoRoomItem* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SCRequestIntoRoomItem>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SCRequestIntoRoomItem::MergeFrom(const SCRequestIntoRoomItem& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.room_id() != 0) {
    set_room_id(from.room_id());
  }
  if (from.player_id() != 0) {
    set_player_id(from.player_id());
  }
}

void SCRequestIntoRoomItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCRequestIntoRoomItem::CopyFrom(const SCRequestIntoRoomItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCRequestIntoRoomItem::IsInitialized() const {

  return true;
}

void SCRequestIntoRoomItem::Swap(SCRequestIntoRoomItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SCRequestIntoRoomItem::InternalSwap(SCRequestIntoRoomItem* other) {
  std::swap(room_id_, other->room_id_);
  std::swap(player_id_, other->player_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SCRequestIntoRoomItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SCRequestIntoRoomItem_descriptor_;
  metadata.reflection = SCRequestIntoRoomItem_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SCRequestIntoRoomItem

// optional int32 room_id = 1;
void SCRequestIntoRoomItem::clear_room_id() {
  room_id_ = 0;
}
 ::google::protobuf::int32 SCRequestIntoRoomItem::room_id() const {
  // @@protoc_insertion_point(field_get:protocol.SCRequestIntoRoomItem.room_id)
  return room_id_;
}
 void SCRequestIntoRoomItem::set_room_id(::google::protobuf::int32 value) {
  
  room_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.SCRequestIntoRoomItem.room_id)
}

// optional int32 player_id = 2;
void SCRequestIntoRoomItem::clear_player_id() {
  player_id_ = 0;
}
 ::google::protobuf::int32 SCRequestIntoRoomItem::player_id() const {
  // @@protoc_insertion_point(field_get:protocol.SCRequestIntoRoomItem.player_id)
  return player_id_;
}
 void SCRequestIntoRoomItem::set_player_id(::google::protobuf::int32 value) {
  
  player_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.SCRequestIntoRoomItem.player_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int SCRequestIntoRoomList::kRequestFieldNumber;
#endif  // !_MSC_VER

SCRequestIntoRoomList::SCRequestIntoRoomList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.SCRequestIntoRoomList)
}

void SCRequestIntoRoomList::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SCRequestIntoRoomList::SCRequestIntoRoomList(const SCRequestIntoRoomList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.SCRequestIntoRoomList)
}

void SCRequestIntoRoomList::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

SCRequestIntoRoomList::~SCRequestIntoRoomList() {
  // @@protoc_insertion_point(destructor:protocol.SCRequestIntoRoomList)
  SharedDtor();
}

void SCRequestIntoRoomList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SCRequestIntoRoomList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SCRequestIntoRoomList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SCRequestIntoRoomList_descriptor_;
}

const SCRequestIntoRoomList& SCRequestIntoRoomList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chat_2eproto();
  return *default_instance_;
}

SCRequestIntoRoomList* SCRequestIntoRoomList::default_instance_ = NULL;

SCRequestIntoRoomList* SCRequestIntoRoomList::New(::google::protobuf::Arena* arena) const {
  SCRequestIntoRoomList* n = new SCRequestIntoRoomList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SCRequestIntoRoomList::Clear() {
  request_.Clear();
}

bool SCRequestIntoRoomList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.SCRequestIntoRoomList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocol.SCRequestIntoRoomItem request = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_request;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.SCRequestIntoRoomList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.SCRequestIntoRoomList)
  return false;
#undef DO_
}

void SCRequestIntoRoomList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.SCRequestIntoRoomList)
  // repeated .protocol.SCRequestIntoRoomItem request = 1;
  for (unsigned int i = 0, n = this->request_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->request(i), output);
  }

  // @@protoc_insertion_point(serialize_end:protocol.SCRequestIntoRoomList)
}

::google::protobuf::uint8* SCRequestIntoRoomList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.SCRequestIntoRoomList)
  // repeated .protocol.SCRequestIntoRoomItem request = 1;
  for (unsigned int i = 0, n = this->request_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->request(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:protocol.SCRequestIntoRoomList)
  return target;
}

int SCRequestIntoRoomList::ByteSize() const {
  int total_size = 0;

  // repeated .protocol.SCRequestIntoRoomItem request = 1;
  total_size += 1 * this->request_size();
  for (int i = 0; i < this->request_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->request(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCRequestIntoRoomList::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SCRequestIntoRoomList* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SCRequestIntoRoomList>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SCRequestIntoRoomList::MergeFrom(const SCRequestIntoRoomList& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  request_.MergeFrom(from.request_);
}

void SCRequestIntoRoomList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCRequestIntoRoomList::CopyFrom(const SCRequestIntoRoomList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCRequestIntoRoomList::IsInitialized() const {

  return true;
}

void SCRequestIntoRoomList::Swap(SCRequestIntoRoomList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SCRequestIntoRoomList::InternalSwap(SCRequestIntoRoomList* other) {
  request_.UnsafeArenaSwap(&other->request_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SCRequestIntoRoomList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SCRequestIntoRoomList_descriptor_;
  metadata.reflection = SCRequestIntoRoomList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SCRequestIntoRoomList

// repeated .protocol.SCRequestIntoRoomItem request = 1;
int SCRequestIntoRoomList::request_size() const {
  return request_.size();
}
void SCRequestIntoRoomList::clear_request() {
  request_.Clear();
}
 const ::protocol::SCRequestIntoRoomItem& SCRequestIntoRoomList::request(int index) const {
  // @@protoc_insertion_point(field_get:protocol.SCRequestIntoRoomList.request)
  return request_.Get(index);
}
 ::protocol::SCRequestIntoRoomItem* SCRequestIntoRoomList::mutable_request(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.SCRequestIntoRoomList.request)
  return request_.Mutable(index);
}
 ::protocol::SCRequestIntoRoomItem* SCRequestIntoRoomList::add_request() {
  // @@protoc_insertion_point(field_add:protocol.SCRequestIntoRoomList.request)
  return request_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::protocol::SCRequestIntoRoomItem >&
SCRequestIntoRoomList::request() const {
  // @@protoc_insertion_point(field_list:protocol.SCRequestIntoRoomList.request)
  return request_;
}
 ::google::protobuf::RepeatedPtrField< ::protocol::SCRequestIntoRoomItem >*
SCRequestIntoRoomList::mutable_request() {
  // @@protoc_insertion_point(field_mutable_list:protocol.SCRequestIntoRoomList.request)
  return &request_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CSRoomChatMessage::kRoomIdFieldNumber;
const int CSRoomChatMessage::kChatMessageFieldNumber;
#endif  // !_MSC_VER

CSRoomChatMessage::CSRoomChatMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.CSRoomChatMessage)
}

void CSRoomChatMessage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CSRoomChatMessage::CSRoomChatMessage(const CSRoomChatMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.CSRoomChatMessage)
}

void CSRoomChatMessage::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  room_id_ = 0;
  chat_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CSRoomChatMessage::~CSRoomChatMessage() {
  // @@protoc_insertion_point(destructor:protocol.CSRoomChatMessage)
  SharedDtor();
}

void CSRoomChatMessage::SharedDtor() {
  chat_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CSRoomChatMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSRoomChatMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSRoomChatMessage_descriptor_;
}

const CSRoomChatMessage& CSRoomChatMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chat_2eproto();
  return *default_instance_;
}

CSRoomChatMessage* CSRoomChatMessage::default_instance_ = NULL;

CSRoomChatMessage* CSRoomChatMessage::New(::google::protobuf::Arena* arena) const {
  CSRoomChatMessage* n = new CSRoomChatMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSRoomChatMessage::Clear() {
  room_id_ = 0;
  chat_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CSRoomChatMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.CSRoomChatMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 room_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_chat_message;
        break;
      }

      // optional string chat_message = 2;
      case 2: {
        if (tag == 18) {
         parse_chat_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chat_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->chat_message().data(), this->chat_message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.CSRoomChatMessage.chat_message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.CSRoomChatMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.CSRoomChatMessage)
  return false;
#undef DO_
}

void CSRoomChatMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.CSRoomChatMessage)
  // optional int32 room_id = 1;
  if (this->room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->room_id(), output);
  }

  // optional string chat_message = 2;
  if (this->chat_message().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chat_message().data(), this->chat_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.CSRoomChatMessage.chat_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->chat_message(), output);
  }

  // @@protoc_insertion_point(serialize_end:protocol.CSRoomChatMessage)
}

::google::protobuf::uint8* CSRoomChatMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.CSRoomChatMessage)
  // optional int32 room_id = 1;
  if (this->room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->room_id(), target);
  }

  // optional string chat_message = 2;
  if (this->chat_message().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chat_message().data(), this->chat_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.CSRoomChatMessage.chat_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->chat_message(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:protocol.CSRoomChatMessage)
  return target;
}

int CSRoomChatMessage::ByteSize() const {
  int total_size = 0;

  // optional int32 room_id = 1;
  if (this->room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->room_id());
  }

  // optional string chat_message = 2;
  if (this->chat_message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->chat_message());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSRoomChatMessage::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CSRoomChatMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CSRoomChatMessage>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSRoomChatMessage::MergeFrom(const CSRoomChatMessage& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.room_id() != 0) {
    set_room_id(from.room_id());
  }
  if (from.chat_message().size() > 0) {

    chat_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chat_message_);
  }
}

void CSRoomChatMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSRoomChatMessage::CopyFrom(const CSRoomChatMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSRoomChatMessage::IsInitialized() const {

  return true;
}

void CSRoomChatMessage::Swap(CSRoomChatMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSRoomChatMessage::InternalSwap(CSRoomChatMessage* other) {
  std::swap(room_id_, other->room_id_);
  chat_message_.Swap(&other->chat_message_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSRoomChatMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSRoomChatMessage_descriptor_;
  metadata.reflection = CSRoomChatMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSRoomChatMessage

// optional int32 room_id = 1;
void CSRoomChatMessage::clear_room_id() {
  room_id_ = 0;
}
 ::google::protobuf::int32 CSRoomChatMessage::room_id() const {
  // @@protoc_insertion_point(field_get:protocol.CSRoomChatMessage.room_id)
  return room_id_;
}
 void CSRoomChatMessage::set_room_id(::google::protobuf::int32 value) {
  
  room_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.CSRoomChatMessage.room_id)
}

// optional string chat_message = 2;
void CSRoomChatMessage::clear_chat_message() {
  chat_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CSRoomChatMessage::chat_message() const {
  // @@protoc_insertion_point(field_get:protocol.CSRoomChatMessage.chat_message)
  return chat_message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CSRoomChatMessage::set_chat_message(const ::std::string& value) {
  
  chat_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.CSRoomChatMessage.chat_message)
}
 void CSRoomChatMessage::set_chat_message(const char* value) {
  
  chat_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.CSRoomChatMessage.chat_message)
}
 void CSRoomChatMessage::set_chat_message(const char* value, size_t size) {
  
  chat_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.CSRoomChatMessage.chat_message)
}
 ::std::string* CSRoomChatMessage::mutable_chat_message() {
  
  // @@protoc_insertion_point(field_mutable:protocol.CSRoomChatMessage.chat_message)
  return chat_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CSRoomChatMessage::release_chat_message() {
  
  return chat_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CSRoomChatMessage::set_allocated_chat_message(::std::string* chat_message) {
  if (chat_message != NULL) {
    
  } else {
    
  }
  chat_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chat_message);
  // @@protoc_insertion_point(field_set_allocated:protocol.CSRoomChatMessage.chat_message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int SCRoomChatMessage::kPlayerIdFieldNumber;
const int SCRoomChatMessage::kPlayerNameFieldNumber;
const int SCRoomChatMessage::kRoomIdFieldNumber;
const int SCRoomChatMessage::kChatMessageFieldNumber;
#endif  // !_MSC_VER

SCRoomChatMessage::SCRoomChatMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.SCRoomChatMessage)
}

void SCRoomChatMessage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SCRoomChatMessage::SCRoomChatMessage(const SCRoomChatMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.SCRoomChatMessage)
}

void SCRoomChatMessage::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  player_id_ = 0;
  player_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  room_id_ = 0;
  chat_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SCRoomChatMessage::~SCRoomChatMessage() {
  // @@protoc_insertion_point(destructor:protocol.SCRoomChatMessage)
  SharedDtor();
}

void SCRoomChatMessage::SharedDtor() {
  player_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chat_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SCRoomChatMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SCRoomChatMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SCRoomChatMessage_descriptor_;
}

const SCRoomChatMessage& SCRoomChatMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chat_2eproto();
  return *default_instance_;
}

SCRoomChatMessage* SCRoomChatMessage::default_instance_ = NULL;

SCRoomChatMessage* SCRoomChatMessage::New(::google::protobuf::Arena* arena) const {
  SCRoomChatMessage* n = new SCRoomChatMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SCRoomChatMessage::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SCRoomChatMessage*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(player_id_, room_id_);
  player_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chat_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool SCRoomChatMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.SCRoomChatMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 player_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_player_name;
        break;
      }

      // optional string player_name = 2;
      case 2: {
        if (tag == 18) {
         parse_player_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->player_name().data(), this->player_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.SCRoomChatMessage.player_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_room_id;
        break;
      }

      // optional int32 room_id = 3;
      case 3: {
        if (tag == 24) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_chat_message;
        break;
      }

      // optional string chat_message = 4;
      case 4: {
        if (tag == 34) {
         parse_chat_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chat_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->chat_message().data(), this->chat_message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.SCRoomChatMessage.chat_message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.SCRoomChatMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.SCRoomChatMessage)
  return false;
#undef DO_
}

void SCRoomChatMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.SCRoomChatMessage)
  // optional int32 player_id = 1;
  if (this->player_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player_id(), output);
  }

  // optional string player_name = 2;
  if (this->player_name().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.SCRoomChatMessage.player_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->player_name(), output);
  }

  // optional int32 room_id = 3;
  if (this->room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->room_id(), output);
  }

  // optional string chat_message = 4;
  if (this->chat_message().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chat_message().data(), this->chat_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.SCRoomChatMessage.chat_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->chat_message(), output);
  }

  // @@protoc_insertion_point(serialize_end:protocol.SCRoomChatMessage)
}

::google::protobuf::uint8* SCRoomChatMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.SCRoomChatMessage)
  // optional int32 player_id = 1;
  if (this->player_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player_id(), target);
  }

  // optional string player_name = 2;
  if (this->player_name().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.SCRoomChatMessage.player_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->player_name(), target);
  }

  // optional int32 room_id = 3;
  if (this->room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->room_id(), target);
  }

  // optional string chat_message = 4;
  if (this->chat_message().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chat_message().data(), this->chat_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.SCRoomChatMessage.chat_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->chat_message(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:protocol.SCRoomChatMessage)
  return target;
}

int SCRoomChatMessage::ByteSize() const {
  int total_size = 0;

  // optional int32 player_id = 1;
  if (this->player_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->player_id());
  }

  // optional string player_name = 2;
  if (this->player_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->player_name());
  }

  // optional int32 room_id = 3;
  if (this->room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->room_id());
  }

  // optional string chat_message = 4;
  if (this->chat_message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->chat_message());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCRoomChatMessage::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SCRoomChatMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SCRoomChatMessage>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SCRoomChatMessage::MergeFrom(const SCRoomChatMessage& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.player_id() != 0) {
    set_player_id(from.player_id());
  }
  if (from.player_name().size() > 0) {

    player_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.player_name_);
  }
  if (from.room_id() != 0) {
    set_room_id(from.room_id());
  }
  if (from.chat_message().size() > 0) {

    chat_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chat_message_);
  }
}

void SCRoomChatMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCRoomChatMessage::CopyFrom(const SCRoomChatMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCRoomChatMessage::IsInitialized() const {

  return true;
}

void SCRoomChatMessage::Swap(SCRoomChatMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SCRoomChatMessage::InternalSwap(SCRoomChatMessage* other) {
  std::swap(player_id_, other->player_id_);
  player_name_.Swap(&other->player_name_);
  std::swap(room_id_, other->room_id_);
  chat_message_.Swap(&other->chat_message_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SCRoomChatMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SCRoomChatMessage_descriptor_;
  metadata.reflection = SCRoomChatMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SCRoomChatMessage

// optional int32 player_id = 1;
void SCRoomChatMessage::clear_player_id() {
  player_id_ = 0;
}
 ::google::protobuf::int32 SCRoomChatMessage::player_id() const {
  // @@protoc_insertion_point(field_get:protocol.SCRoomChatMessage.player_id)
  return player_id_;
}
 void SCRoomChatMessage::set_player_id(::google::protobuf::int32 value) {
  
  player_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.SCRoomChatMessage.player_id)
}

// optional string player_name = 2;
void SCRoomChatMessage::clear_player_name() {
  player_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SCRoomChatMessage::player_name() const {
  // @@protoc_insertion_point(field_get:protocol.SCRoomChatMessage.player_name)
  return player_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SCRoomChatMessage::set_player_name(const ::std::string& value) {
  
  player_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.SCRoomChatMessage.player_name)
}
 void SCRoomChatMessage::set_player_name(const char* value) {
  
  player_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.SCRoomChatMessage.player_name)
}
 void SCRoomChatMessage::set_player_name(const char* value, size_t size) {
  
  player_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.SCRoomChatMessage.player_name)
}
 ::std::string* SCRoomChatMessage::mutable_player_name() {
  
  // @@protoc_insertion_point(field_mutable:protocol.SCRoomChatMessage.player_name)
  return player_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SCRoomChatMessage::release_player_name() {
  
  return player_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SCRoomChatMessage::set_allocated_player_name(::std::string* player_name) {
  if (player_name != NULL) {
    
  } else {
    
  }
  player_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), player_name);
  // @@protoc_insertion_point(field_set_allocated:protocol.SCRoomChatMessage.player_name)
}

// optional int32 room_id = 3;
void SCRoomChatMessage::clear_room_id() {
  room_id_ = 0;
}
 ::google::protobuf::int32 SCRoomChatMessage::room_id() const {
  // @@protoc_insertion_point(field_get:protocol.SCRoomChatMessage.room_id)
  return room_id_;
}
 void SCRoomChatMessage::set_room_id(::google::protobuf::int32 value) {
  
  room_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.SCRoomChatMessage.room_id)
}

// optional string chat_message = 4;
void SCRoomChatMessage::clear_chat_message() {
  chat_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SCRoomChatMessage::chat_message() const {
  // @@protoc_insertion_point(field_get:protocol.SCRoomChatMessage.chat_message)
  return chat_message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SCRoomChatMessage::set_chat_message(const ::std::string& value) {
  
  chat_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.SCRoomChatMessage.chat_message)
}
 void SCRoomChatMessage::set_chat_message(const char* value) {
  
  chat_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.SCRoomChatMessage.chat_message)
}
 void SCRoomChatMessage::set_chat_message(const char* value, size_t size) {
  
  chat_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.SCRoomChatMessage.chat_message)
}
 ::std::string* SCRoomChatMessage::mutable_chat_message() {
  
  // @@protoc_insertion_point(field_mutable:protocol.SCRoomChatMessage.chat_message)
  return chat_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SCRoomChatMessage::release_chat_message() {
  
  return chat_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SCRoomChatMessage::set_allocated_chat_message(::std::string* chat_message) {
  if (chat_message != NULL) {
    
  } else {
    
  }
  chat_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chat_message);
  // @@protoc_insertion_point(field_set_allocated:protocol.SCRoomChatMessage.chat_message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol

// @@protoc_insertion_point(global_scope)
