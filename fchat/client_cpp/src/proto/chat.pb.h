// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat.proto

#ifndef PROTOBUF_chat_2eproto__INCLUDED
#define PROTOBUF_chat_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protocol {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_chat_2eproto();
void protobuf_AssignDesc_chat_2eproto();
void protobuf_ShutdownFile_chat_2eproto();

class CSChatMessage;
class SCChatMessage;
class CSCreateRoom;
class SCCreateRoom;
class CSInvitePlayerIntoRoom;
class CSRequestIntoRoom;
class CSResponseInviteIntoRoom;
class CSResponseRequestIntoRoom;
class SCInviteIntoRoomList;
class SCRequestIntoRoomItem;
class SCRequestIntoRoomList;
class CSRoomChatMessage;
class SCRoomChatMessage;

// ===================================================================

class CSChatMessage : public ::google::protobuf::Message {
 public:
  CSChatMessage();
  virtual ~CSChatMessage();

  CSChatMessage(const CSChatMessage& from);

  inline CSChatMessage& operator=(const CSChatMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSChatMessage& default_instance();

  void Swap(CSChatMessage* other);

  // implements Message ----------------------------------------------

  inline CSChatMessage* New() const { return New(NULL); }

  CSChatMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSChatMessage& from);
  void MergeFrom(const CSChatMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CSChatMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 player_id = 1;
  void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  ::google::protobuf::int32 player_id() const;
  void set_player_id(::google::protobuf::int32 value);

  // optional string chat_message = 2;
  void clear_chat_message();
  static const int kChatMessageFieldNumber = 2;
  const ::std::string& chat_message() const;
  void set_chat_message(const ::std::string& value);
  void set_chat_message(const char* value);
  void set_chat_message(const char* value, size_t size);
  ::std::string* mutable_chat_message();
  ::std::string* release_chat_message();
  void set_allocated_chat_message(::std::string* chat_message);

  // @@protoc_insertion_point(class_scope:protocol.CSChatMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr chat_message_;
  ::google::protobuf::int32 player_id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();

  void InitAsDefaultInstance();
  static CSChatMessage* default_instance_;
};
// -------------------------------------------------------------------

class SCChatMessage : public ::google::protobuf::Message {
 public:
  SCChatMessage();
  virtual ~SCChatMessage();

  SCChatMessage(const SCChatMessage& from);

  inline SCChatMessage& operator=(const SCChatMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SCChatMessage& default_instance();

  void Swap(SCChatMessage* other);

  // implements Message ----------------------------------------------

  inline SCChatMessage* New() const { return New(NULL); }

  SCChatMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SCChatMessage& from);
  void MergeFrom(const SCChatMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SCChatMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 player_id = 1;
  void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  ::google::protobuf::int32 player_id() const;
  void set_player_id(::google::protobuf::int32 value);

  // optional string chat_message = 3;
  void clear_chat_message();
  static const int kChatMessageFieldNumber = 3;
  const ::std::string& chat_message() const;
  void set_chat_message(const ::std::string& value);
  void set_chat_message(const char* value);
  void set_chat_message(const char* value, size_t size);
  ::std::string* mutable_chat_message();
  ::std::string* release_chat_message();
  void set_allocated_chat_message(::std::string* chat_message);

  // @@protoc_insertion_point(class_scope:protocol.SCChatMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr chat_message_;
  ::google::protobuf::int32 player_id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();

  void InitAsDefaultInstance();
  static SCChatMessage* default_instance_;
};
// -------------------------------------------------------------------

class CSCreateRoom : public ::google::protobuf::Message {
 public:
  CSCreateRoom();
  virtual ~CSCreateRoom();

  CSCreateRoom(const CSCreateRoom& from);

  inline CSCreateRoom& operator=(const CSCreateRoom& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSCreateRoom& default_instance();

  void Swap(CSCreateRoom* other);

  // implements Message ----------------------------------------------

  inline CSCreateRoom* New() const { return New(NULL); }

  CSCreateRoom* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSCreateRoom& from);
  void MergeFrom(const CSCreateRoom& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CSCreateRoom* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string room_name = 1;
  void clear_room_name();
  static const int kRoomNameFieldNumber = 1;
  const ::std::string& room_name() const;
  void set_room_name(const ::std::string& value);
  void set_room_name(const char* value);
  void set_room_name(const char* value, size_t size);
  ::std::string* mutable_room_name();
  ::std::string* release_room_name();
  void set_allocated_room_name(::std::string* room_name);

  // @@protoc_insertion_point(class_scope:protocol.CSCreateRoom)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr room_name_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();

  void InitAsDefaultInstance();
  static CSCreateRoom* default_instance_;
};
// -------------------------------------------------------------------

class SCCreateRoom : public ::google::protobuf::Message {
 public:
  SCCreateRoom();
  virtual ~SCCreateRoom();

  SCCreateRoom(const SCCreateRoom& from);

  inline SCCreateRoom& operator=(const SCCreateRoom& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SCCreateRoom& default_instance();

  void Swap(SCCreateRoom* other);

  // implements Message ----------------------------------------------

  inline SCCreateRoom* New() const { return New(NULL); }

  SCCreateRoom* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SCCreateRoom& from);
  void MergeFrom(const SCCreateRoom& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SCCreateRoom* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string room_name = 1;
  void clear_room_name();
  static const int kRoomNameFieldNumber = 1;
  const ::std::string& room_name() const;
  void set_room_name(const ::std::string& value);
  void set_room_name(const char* value);
  void set_room_name(const char* value, size_t size);
  ::std::string* mutable_room_name();
  ::std::string* release_room_name();
  void set_allocated_room_name(::std::string* room_name);

  // optional int32 room_id = 2;
  void clear_room_id();
  static const int kRoomIdFieldNumber = 2;
  ::google::protobuf::int32 room_id() const;
  void set_room_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protocol.SCCreateRoom)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr room_name_;
  ::google::protobuf::int32 room_id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();

  void InitAsDefaultInstance();
  static SCCreateRoom* default_instance_;
};
// -------------------------------------------------------------------

class CSInvitePlayerIntoRoom : public ::google::protobuf::Message {
 public:
  CSInvitePlayerIntoRoom();
  virtual ~CSInvitePlayerIntoRoom();

  CSInvitePlayerIntoRoom(const CSInvitePlayerIntoRoom& from);

  inline CSInvitePlayerIntoRoom& operator=(const CSInvitePlayerIntoRoom& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSInvitePlayerIntoRoom& default_instance();

  void Swap(CSInvitePlayerIntoRoom* other);

  // implements Message ----------------------------------------------

  inline CSInvitePlayerIntoRoom* New() const { return New(NULL); }

  CSInvitePlayerIntoRoom* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSInvitePlayerIntoRoom& from);
  void MergeFrom(const CSInvitePlayerIntoRoom& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CSInvitePlayerIntoRoom* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 room_id = 1;
  void clear_room_id();
  static const int kRoomIdFieldNumber = 1;
  ::google::protobuf::int32 room_id() const;
  void set_room_id(::google::protobuf::int32 value);

  // optional int32 player_id = 2;
  void clear_player_id();
  static const int kPlayerIdFieldNumber = 2;
  ::google::protobuf::int32 player_id() const;
  void set_player_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protocol.CSInvitePlayerIntoRoom)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 room_id_;
  ::google::protobuf::int32 player_id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();

  void InitAsDefaultInstance();
  static CSInvitePlayerIntoRoom* default_instance_;
};
// -------------------------------------------------------------------

class CSRequestIntoRoom : public ::google::protobuf::Message {
 public:
  CSRequestIntoRoom();
  virtual ~CSRequestIntoRoom();

  CSRequestIntoRoom(const CSRequestIntoRoom& from);

  inline CSRequestIntoRoom& operator=(const CSRequestIntoRoom& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSRequestIntoRoom& default_instance();

  void Swap(CSRequestIntoRoom* other);

  // implements Message ----------------------------------------------

  inline CSRequestIntoRoom* New() const { return New(NULL); }

  CSRequestIntoRoom* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSRequestIntoRoom& from);
  void MergeFrom(const CSRequestIntoRoom& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CSRequestIntoRoom* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 room_id = 1;
  void clear_room_id();
  static const int kRoomIdFieldNumber = 1;
  ::google::protobuf::int32 room_id() const;
  void set_room_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protocol.CSRequestIntoRoom)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 room_id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();

  void InitAsDefaultInstance();
  static CSRequestIntoRoom* default_instance_;
};
// -------------------------------------------------------------------

class CSResponseInviteIntoRoom : public ::google::protobuf::Message {
 public:
  CSResponseInviteIntoRoom();
  virtual ~CSResponseInviteIntoRoom();

  CSResponseInviteIntoRoom(const CSResponseInviteIntoRoom& from);

  inline CSResponseInviteIntoRoom& operator=(const CSResponseInviteIntoRoom& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSResponseInviteIntoRoom& default_instance();

  void Swap(CSResponseInviteIntoRoom* other);

  // implements Message ----------------------------------------------

  inline CSResponseInviteIntoRoom* New() const { return New(NULL); }

  CSResponseInviteIntoRoom* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSResponseInviteIntoRoom& from);
  void MergeFrom(const CSResponseInviteIntoRoom& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CSResponseInviteIntoRoom* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 room_id = 1;
  void clear_room_id();
  static const int kRoomIdFieldNumber = 1;
  ::google::protobuf::int32 room_id() const;
  void set_room_id(::google::protobuf::int32 value);

  // optional int32 agree = 2;
  void clear_agree();
  static const int kAgreeFieldNumber = 2;
  ::google::protobuf::int32 agree() const;
  void set_agree(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protocol.CSResponseInviteIntoRoom)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 room_id_;
  ::google::protobuf::int32 agree_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();

  void InitAsDefaultInstance();
  static CSResponseInviteIntoRoom* default_instance_;
};
// -------------------------------------------------------------------

class CSResponseRequestIntoRoom : public ::google::protobuf::Message {
 public:
  CSResponseRequestIntoRoom();
  virtual ~CSResponseRequestIntoRoom();

  CSResponseRequestIntoRoom(const CSResponseRequestIntoRoom& from);

  inline CSResponseRequestIntoRoom& operator=(const CSResponseRequestIntoRoom& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSResponseRequestIntoRoom& default_instance();

  void Swap(CSResponseRequestIntoRoom* other);

  // implements Message ----------------------------------------------

  inline CSResponseRequestIntoRoom* New() const { return New(NULL); }

  CSResponseRequestIntoRoom* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSResponseRequestIntoRoom& from);
  void MergeFrom(const CSResponseRequestIntoRoom& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CSResponseRequestIntoRoom* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 room_id = 1;
  void clear_room_id();
  static const int kRoomIdFieldNumber = 1;
  ::google::protobuf::int32 room_id() const;
  void set_room_id(::google::protobuf::int32 value);

  // optional int32 player_id = 2;
  void clear_player_id();
  static const int kPlayerIdFieldNumber = 2;
  ::google::protobuf::int32 player_id() const;
  void set_player_id(::google::protobuf::int32 value);

  // optional int32 agree = 3;
  void clear_agree();
  static const int kAgreeFieldNumber = 3;
  ::google::protobuf::int32 agree() const;
  void set_agree(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protocol.CSResponseRequestIntoRoom)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 room_id_;
  ::google::protobuf::int32 player_id_;
  ::google::protobuf::int32 agree_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();

  void InitAsDefaultInstance();
  static CSResponseRequestIntoRoom* default_instance_;
};
// -------------------------------------------------------------------

class SCInviteIntoRoomList : public ::google::protobuf::Message {
 public:
  SCInviteIntoRoomList();
  virtual ~SCInviteIntoRoomList();

  SCInviteIntoRoomList(const SCInviteIntoRoomList& from);

  inline SCInviteIntoRoomList& operator=(const SCInviteIntoRoomList& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SCInviteIntoRoomList& default_instance();

  void Swap(SCInviteIntoRoomList* other);

  // implements Message ----------------------------------------------

  inline SCInviteIntoRoomList* New() const { return New(NULL); }

  SCInviteIntoRoomList* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SCInviteIntoRoomList& from);
  void MergeFrom(const SCInviteIntoRoomList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SCInviteIntoRoomList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 room_id = 1;
  int room_id_size() const;
  void clear_room_id();
  static const int kRoomIdFieldNumber = 1;
  ::google::protobuf::int32 room_id(int index) const;
  void set_room_id(int index, ::google::protobuf::int32 value);
  void add_room_id(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      room_id() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_room_id();

  // @@protoc_insertion_point(class_scope:protocol.SCInviteIntoRoomList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > room_id_;
  mutable int _room_id_cached_byte_size_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();

  void InitAsDefaultInstance();
  static SCInviteIntoRoomList* default_instance_;
};
// -------------------------------------------------------------------

class SCRequestIntoRoomItem : public ::google::protobuf::Message {
 public:
  SCRequestIntoRoomItem();
  virtual ~SCRequestIntoRoomItem();

  SCRequestIntoRoomItem(const SCRequestIntoRoomItem& from);

  inline SCRequestIntoRoomItem& operator=(const SCRequestIntoRoomItem& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SCRequestIntoRoomItem& default_instance();

  void Swap(SCRequestIntoRoomItem* other);

  // implements Message ----------------------------------------------

  inline SCRequestIntoRoomItem* New() const { return New(NULL); }

  SCRequestIntoRoomItem* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SCRequestIntoRoomItem& from);
  void MergeFrom(const SCRequestIntoRoomItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SCRequestIntoRoomItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 room_id = 1;
  void clear_room_id();
  static const int kRoomIdFieldNumber = 1;
  ::google::protobuf::int32 room_id() const;
  void set_room_id(::google::protobuf::int32 value);

  // optional int32 player_id = 2;
  void clear_player_id();
  static const int kPlayerIdFieldNumber = 2;
  ::google::protobuf::int32 player_id() const;
  void set_player_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protocol.SCRequestIntoRoomItem)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 room_id_;
  ::google::protobuf::int32 player_id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();

  void InitAsDefaultInstance();
  static SCRequestIntoRoomItem* default_instance_;
};
// -------------------------------------------------------------------

class SCRequestIntoRoomList : public ::google::protobuf::Message {
 public:
  SCRequestIntoRoomList();
  virtual ~SCRequestIntoRoomList();

  SCRequestIntoRoomList(const SCRequestIntoRoomList& from);

  inline SCRequestIntoRoomList& operator=(const SCRequestIntoRoomList& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SCRequestIntoRoomList& default_instance();

  void Swap(SCRequestIntoRoomList* other);

  // implements Message ----------------------------------------------

  inline SCRequestIntoRoomList* New() const { return New(NULL); }

  SCRequestIntoRoomList* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SCRequestIntoRoomList& from);
  void MergeFrom(const SCRequestIntoRoomList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SCRequestIntoRoomList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .protocol.SCRequestIntoRoomItem request = 1;
  int request_size() const;
  void clear_request();
  static const int kRequestFieldNumber = 1;
  const ::protocol::SCRequestIntoRoomItem& request(int index) const;
  ::protocol::SCRequestIntoRoomItem* mutable_request(int index);
  ::protocol::SCRequestIntoRoomItem* add_request();
  const ::google::protobuf::RepeatedPtrField< ::protocol::SCRequestIntoRoomItem >&
      request() const;
  ::google::protobuf::RepeatedPtrField< ::protocol::SCRequestIntoRoomItem >*
      mutable_request();

  // @@protoc_insertion_point(class_scope:protocol.SCRequestIntoRoomList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::protocol::SCRequestIntoRoomItem > request_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();

  void InitAsDefaultInstance();
  static SCRequestIntoRoomList* default_instance_;
};
// -------------------------------------------------------------------

class CSRoomChatMessage : public ::google::protobuf::Message {
 public:
  CSRoomChatMessage();
  virtual ~CSRoomChatMessage();

  CSRoomChatMessage(const CSRoomChatMessage& from);

  inline CSRoomChatMessage& operator=(const CSRoomChatMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSRoomChatMessage& default_instance();

  void Swap(CSRoomChatMessage* other);

  // implements Message ----------------------------------------------

  inline CSRoomChatMessage* New() const { return New(NULL); }

  CSRoomChatMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSRoomChatMessage& from);
  void MergeFrom(const CSRoomChatMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CSRoomChatMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 room_id = 1;
  void clear_room_id();
  static const int kRoomIdFieldNumber = 1;
  ::google::protobuf::int32 room_id() const;
  void set_room_id(::google::protobuf::int32 value);

  // optional string chat_message = 2;
  void clear_chat_message();
  static const int kChatMessageFieldNumber = 2;
  const ::std::string& chat_message() const;
  void set_chat_message(const ::std::string& value);
  void set_chat_message(const char* value);
  void set_chat_message(const char* value, size_t size);
  ::std::string* mutable_chat_message();
  ::std::string* release_chat_message();
  void set_allocated_chat_message(::std::string* chat_message);

  // @@protoc_insertion_point(class_scope:protocol.CSRoomChatMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr chat_message_;
  ::google::protobuf::int32 room_id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();

  void InitAsDefaultInstance();
  static CSRoomChatMessage* default_instance_;
};
// -------------------------------------------------------------------

class SCRoomChatMessage : public ::google::protobuf::Message {
 public:
  SCRoomChatMessage();
  virtual ~SCRoomChatMessage();

  SCRoomChatMessage(const SCRoomChatMessage& from);

  inline SCRoomChatMessage& operator=(const SCRoomChatMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SCRoomChatMessage& default_instance();

  void Swap(SCRoomChatMessage* other);

  // implements Message ----------------------------------------------

  inline SCRoomChatMessage* New() const { return New(NULL); }

  SCRoomChatMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SCRoomChatMessage& from);
  void MergeFrom(const SCRoomChatMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SCRoomChatMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 player_id = 1;
  void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  ::google::protobuf::int32 player_id() const;
  void set_player_id(::google::protobuf::int32 value);

  // optional string player_name = 2;
  void clear_player_name();
  static const int kPlayerNameFieldNumber = 2;
  const ::std::string& player_name() const;
  void set_player_name(const ::std::string& value);
  void set_player_name(const char* value);
  void set_player_name(const char* value, size_t size);
  ::std::string* mutable_player_name();
  ::std::string* release_player_name();
  void set_allocated_player_name(::std::string* player_name);

  // optional int32 room_id = 3;
  void clear_room_id();
  static const int kRoomIdFieldNumber = 3;
  ::google::protobuf::int32 room_id() const;
  void set_room_id(::google::protobuf::int32 value);

  // optional string chat_message = 4;
  void clear_chat_message();
  static const int kChatMessageFieldNumber = 4;
  const ::std::string& chat_message() const;
  void set_chat_message(const ::std::string& value);
  void set_chat_message(const char* value);
  void set_chat_message(const char* value, size_t size);
  ::std::string* mutable_chat_message();
  ::std::string* release_chat_message();
  void set_allocated_chat_message(::std::string* chat_message);

  // @@protoc_insertion_point(class_scope:protocol.SCRoomChatMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr player_name_;
  ::google::protobuf::int32 player_id_;
  ::google::protobuf::int32 room_id_;
  ::google::protobuf::internal::ArenaStringPtr chat_message_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();

  void InitAsDefaultInstance();
  static SCRoomChatMessage* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// CSChatMessage

// optional int32 player_id = 1;
inline void CSChatMessage::clear_player_id() {
  player_id_ = 0;
}
inline ::google::protobuf::int32 CSChatMessage::player_id() const {
  // @@protoc_insertion_point(field_get:protocol.CSChatMessage.player_id)
  return player_id_;
}
inline void CSChatMessage::set_player_id(::google::protobuf::int32 value) {
  
  player_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.CSChatMessage.player_id)
}

// optional string chat_message = 2;
inline void CSChatMessage::clear_chat_message() {
  chat_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CSChatMessage::chat_message() const {
  // @@protoc_insertion_point(field_get:protocol.CSChatMessage.chat_message)
  return chat_message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CSChatMessage::set_chat_message(const ::std::string& value) {
  
  chat_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.CSChatMessage.chat_message)
}
inline void CSChatMessage::set_chat_message(const char* value) {
  
  chat_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.CSChatMessage.chat_message)
}
inline void CSChatMessage::set_chat_message(const char* value, size_t size) {
  
  chat_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.CSChatMessage.chat_message)
}
inline ::std::string* CSChatMessage::mutable_chat_message() {
  
  // @@protoc_insertion_point(field_mutable:protocol.CSChatMessage.chat_message)
  return chat_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CSChatMessage::release_chat_message() {
  
  return chat_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CSChatMessage::set_allocated_chat_message(::std::string* chat_message) {
  if (chat_message != NULL) {
    
  } else {
    
  }
  chat_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chat_message);
  // @@protoc_insertion_point(field_set_allocated:protocol.CSChatMessage.chat_message)
}

// -------------------------------------------------------------------

// SCChatMessage

// optional int32 player_id = 1;
inline void SCChatMessage::clear_player_id() {
  player_id_ = 0;
}
inline ::google::protobuf::int32 SCChatMessage::player_id() const {
  // @@protoc_insertion_point(field_get:protocol.SCChatMessage.player_id)
  return player_id_;
}
inline void SCChatMessage::set_player_id(::google::protobuf::int32 value) {
  
  player_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.SCChatMessage.player_id)
}

// optional string chat_message = 3;
inline void SCChatMessage::clear_chat_message() {
  chat_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SCChatMessage::chat_message() const {
  // @@protoc_insertion_point(field_get:protocol.SCChatMessage.chat_message)
  return chat_message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SCChatMessage::set_chat_message(const ::std::string& value) {
  
  chat_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.SCChatMessage.chat_message)
}
inline void SCChatMessage::set_chat_message(const char* value) {
  
  chat_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.SCChatMessage.chat_message)
}
inline void SCChatMessage::set_chat_message(const char* value, size_t size) {
  
  chat_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.SCChatMessage.chat_message)
}
inline ::std::string* SCChatMessage::mutable_chat_message() {
  
  // @@protoc_insertion_point(field_mutable:protocol.SCChatMessage.chat_message)
  return chat_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SCChatMessage::release_chat_message() {
  
  return chat_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SCChatMessage::set_allocated_chat_message(::std::string* chat_message) {
  if (chat_message != NULL) {
    
  } else {
    
  }
  chat_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chat_message);
  // @@protoc_insertion_point(field_set_allocated:protocol.SCChatMessage.chat_message)
}

// -------------------------------------------------------------------

// CSCreateRoom

// optional string room_name = 1;
inline void CSCreateRoom::clear_room_name() {
  room_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CSCreateRoom::room_name() const {
  // @@protoc_insertion_point(field_get:protocol.CSCreateRoom.room_name)
  return room_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CSCreateRoom::set_room_name(const ::std::string& value) {
  
  room_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.CSCreateRoom.room_name)
}
inline void CSCreateRoom::set_room_name(const char* value) {
  
  room_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.CSCreateRoom.room_name)
}
inline void CSCreateRoom::set_room_name(const char* value, size_t size) {
  
  room_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.CSCreateRoom.room_name)
}
inline ::std::string* CSCreateRoom::mutable_room_name() {
  
  // @@protoc_insertion_point(field_mutable:protocol.CSCreateRoom.room_name)
  return room_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CSCreateRoom::release_room_name() {
  
  return room_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CSCreateRoom::set_allocated_room_name(::std::string* room_name) {
  if (room_name != NULL) {
    
  } else {
    
  }
  room_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), room_name);
  // @@protoc_insertion_point(field_set_allocated:protocol.CSCreateRoom.room_name)
}

// -------------------------------------------------------------------

// SCCreateRoom

// optional string room_name = 1;
inline void SCCreateRoom::clear_room_name() {
  room_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SCCreateRoom::room_name() const {
  // @@protoc_insertion_point(field_get:protocol.SCCreateRoom.room_name)
  return room_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SCCreateRoom::set_room_name(const ::std::string& value) {
  
  room_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.SCCreateRoom.room_name)
}
inline void SCCreateRoom::set_room_name(const char* value) {
  
  room_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.SCCreateRoom.room_name)
}
inline void SCCreateRoom::set_room_name(const char* value, size_t size) {
  
  room_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.SCCreateRoom.room_name)
}
inline ::std::string* SCCreateRoom::mutable_room_name() {
  
  // @@protoc_insertion_point(field_mutable:protocol.SCCreateRoom.room_name)
  return room_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SCCreateRoom::release_room_name() {
  
  return room_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SCCreateRoom::set_allocated_room_name(::std::string* room_name) {
  if (room_name != NULL) {
    
  } else {
    
  }
  room_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), room_name);
  // @@protoc_insertion_point(field_set_allocated:protocol.SCCreateRoom.room_name)
}

// optional int32 room_id = 2;
inline void SCCreateRoom::clear_room_id() {
  room_id_ = 0;
}
inline ::google::protobuf::int32 SCCreateRoom::room_id() const {
  // @@protoc_insertion_point(field_get:protocol.SCCreateRoom.room_id)
  return room_id_;
}
inline void SCCreateRoom::set_room_id(::google::protobuf::int32 value) {
  
  room_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.SCCreateRoom.room_id)
}

// -------------------------------------------------------------------

// CSInvitePlayerIntoRoom

// optional int32 room_id = 1;
inline void CSInvitePlayerIntoRoom::clear_room_id() {
  room_id_ = 0;
}
inline ::google::protobuf::int32 CSInvitePlayerIntoRoom::room_id() const {
  // @@protoc_insertion_point(field_get:protocol.CSInvitePlayerIntoRoom.room_id)
  return room_id_;
}
inline void CSInvitePlayerIntoRoom::set_room_id(::google::protobuf::int32 value) {
  
  room_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.CSInvitePlayerIntoRoom.room_id)
}

// optional int32 player_id = 2;
inline void CSInvitePlayerIntoRoom::clear_player_id() {
  player_id_ = 0;
}
inline ::google::protobuf::int32 CSInvitePlayerIntoRoom::player_id() const {
  // @@protoc_insertion_point(field_get:protocol.CSInvitePlayerIntoRoom.player_id)
  return player_id_;
}
inline void CSInvitePlayerIntoRoom::set_player_id(::google::protobuf::int32 value) {
  
  player_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.CSInvitePlayerIntoRoom.player_id)
}

// -------------------------------------------------------------------

// CSRequestIntoRoom

// optional int32 room_id = 1;
inline void CSRequestIntoRoom::clear_room_id() {
  room_id_ = 0;
}
inline ::google::protobuf::int32 CSRequestIntoRoom::room_id() const {
  // @@protoc_insertion_point(field_get:protocol.CSRequestIntoRoom.room_id)
  return room_id_;
}
inline void CSRequestIntoRoom::set_room_id(::google::protobuf::int32 value) {
  
  room_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.CSRequestIntoRoom.room_id)
}

// -------------------------------------------------------------------

// CSResponseInviteIntoRoom

// optional int32 room_id = 1;
inline void CSResponseInviteIntoRoom::clear_room_id() {
  room_id_ = 0;
}
inline ::google::protobuf::int32 CSResponseInviteIntoRoom::room_id() const {
  // @@protoc_insertion_point(field_get:protocol.CSResponseInviteIntoRoom.room_id)
  return room_id_;
}
inline void CSResponseInviteIntoRoom::set_room_id(::google::protobuf::int32 value) {
  
  room_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.CSResponseInviteIntoRoom.room_id)
}

// optional int32 agree = 2;
inline void CSResponseInviteIntoRoom::clear_agree() {
  agree_ = 0;
}
inline ::google::protobuf::int32 CSResponseInviteIntoRoom::agree() const {
  // @@protoc_insertion_point(field_get:protocol.CSResponseInviteIntoRoom.agree)
  return agree_;
}
inline void CSResponseInviteIntoRoom::set_agree(::google::protobuf::int32 value) {
  
  agree_ = value;
  // @@protoc_insertion_point(field_set:protocol.CSResponseInviteIntoRoom.agree)
}

// -------------------------------------------------------------------

// CSResponseRequestIntoRoom

// optional int32 room_id = 1;
inline void CSResponseRequestIntoRoom::clear_room_id() {
  room_id_ = 0;
}
inline ::google::protobuf::int32 CSResponseRequestIntoRoom::room_id() const {
  // @@protoc_insertion_point(field_get:protocol.CSResponseRequestIntoRoom.room_id)
  return room_id_;
}
inline void CSResponseRequestIntoRoom::set_room_id(::google::protobuf::int32 value) {
  
  room_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.CSResponseRequestIntoRoom.room_id)
}

// optional int32 player_id = 2;
inline void CSResponseRequestIntoRoom::clear_player_id() {
  player_id_ = 0;
}
inline ::google::protobuf::int32 CSResponseRequestIntoRoom::player_id() const {
  // @@protoc_insertion_point(field_get:protocol.CSResponseRequestIntoRoom.player_id)
  return player_id_;
}
inline void CSResponseRequestIntoRoom::set_player_id(::google::protobuf::int32 value) {
  
  player_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.CSResponseRequestIntoRoom.player_id)
}

// optional int32 agree = 3;
inline void CSResponseRequestIntoRoom::clear_agree() {
  agree_ = 0;
}
inline ::google::protobuf::int32 CSResponseRequestIntoRoom::agree() const {
  // @@protoc_insertion_point(field_get:protocol.CSResponseRequestIntoRoom.agree)
  return agree_;
}
inline void CSResponseRequestIntoRoom::set_agree(::google::protobuf::int32 value) {
  
  agree_ = value;
  // @@protoc_insertion_point(field_set:protocol.CSResponseRequestIntoRoom.agree)
}

// -------------------------------------------------------------------

// SCInviteIntoRoomList

// repeated int32 room_id = 1;
inline int SCInviteIntoRoomList::room_id_size() const {
  return room_id_.size();
}
inline void SCInviteIntoRoomList::clear_room_id() {
  room_id_.Clear();
}
inline ::google::protobuf::int32 SCInviteIntoRoomList::room_id(int index) const {
  // @@protoc_insertion_point(field_get:protocol.SCInviteIntoRoomList.room_id)
  return room_id_.Get(index);
}
inline void SCInviteIntoRoomList::set_room_id(int index, ::google::protobuf::int32 value) {
  room_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.SCInviteIntoRoomList.room_id)
}
inline void SCInviteIntoRoomList::add_room_id(::google::protobuf::int32 value) {
  room_id_.Add(value);
  // @@protoc_insertion_point(field_add:protocol.SCInviteIntoRoomList.room_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SCInviteIntoRoomList::room_id() const {
  // @@protoc_insertion_point(field_list:protocol.SCInviteIntoRoomList.room_id)
  return room_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SCInviteIntoRoomList::mutable_room_id() {
  // @@protoc_insertion_point(field_mutable_list:protocol.SCInviteIntoRoomList.room_id)
  return &room_id_;
}

// -------------------------------------------------------------------

// SCRequestIntoRoomItem

// optional int32 room_id = 1;
inline void SCRequestIntoRoomItem::clear_room_id() {
  room_id_ = 0;
}
inline ::google::protobuf::int32 SCRequestIntoRoomItem::room_id() const {
  // @@protoc_insertion_point(field_get:protocol.SCRequestIntoRoomItem.room_id)
  return room_id_;
}
inline void SCRequestIntoRoomItem::set_room_id(::google::protobuf::int32 value) {
  
  room_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.SCRequestIntoRoomItem.room_id)
}

// optional int32 player_id = 2;
inline void SCRequestIntoRoomItem::clear_player_id() {
  player_id_ = 0;
}
inline ::google::protobuf::int32 SCRequestIntoRoomItem::player_id() const {
  // @@protoc_insertion_point(field_get:protocol.SCRequestIntoRoomItem.player_id)
  return player_id_;
}
inline void SCRequestIntoRoomItem::set_player_id(::google::protobuf::int32 value) {
  
  player_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.SCRequestIntoRoomItem.player_id)
}

// -------------------------------------------------------------------

// SCRequestIntoRoomList

// repeated .protocol.SCRequestIntoRoomItem request = 1;
inline int SCRequestIntoRoomList::request_size() const {
  return request_.size();
}
inline void SCRequestIntoRoomList::clear_request() {
  request_.Clear();
}
inline const ::protocol::SCRequestIntoRoomItem& SCRequestIntoRoomList::request(int index) const {
  // @@protoc_insertion_point(field_get:protocol.SCRequestIntoRoomList.request)
  return request_.Get(index);
}
inline ::protocol::SCRequestIntoRoomItem* SCRequestIntoRoomList::mutable_request(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.SCRequestIntoRoomList.request)
  return request_.Mutable(index);
}
inline ::protocol::SCRequestIntoRoomItem* SCRequestIntoRoomList::add_request() {
  // @@protoc_insertion_point(field_add:protocol.SCRequestIntoRoomList.request)
  return request_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocol::SCRequestIntoRoomItem >&
SCRequestIntoRoomList::request() const {
  // @@protoc_insertion_point(field_list:protocol.SCRequestIntoRoomList.request)
  return request_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocol::SCRequestIntoRoomItem >*
SCRequestIntoRoomList::mutable_request() {
  // @@protoc_insertion_point(field_mutable_list:protocol.SCRequestIntoRoomList.request)
  return &request_;
}

// -------------------------------------------------------------------

// CSRoomChatMessage

// optional int32 room_id = 1;
inline void CSRoomChatMessage::clear_room_id() {
  room_id_ = 0;
}
inline ::google::protobuf::int32 CSRoomChatMessage::room_id() const {
  // @@protoc_insertion_point(field_get:protocol.CSRoomChatMessage.room_id)
  return room_id_;
}
inline void CSRoomChatMessage::set_room_id(::google::protobuf::int32 value) {
  
  room_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.CSRoomChatMessage.room_id)
}

// optional string chat_message = 2;
inline void CSRoomChatMessage::clear_chat_message() {
  chat_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CSRoomChatMessage::chat_message() const {
  // @@protoc_insertion_point(field_get:protocol.CSRoomChatMessage.chat_message)
  return chat_message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CSRoomChatMessage::set_chat_message(const ::std::string& value) {
  
  chat_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.CSRoomChatMessage.chat_message)
}
inline void CSRoomChatMessage::set_chat_message(const char* value) {
  
  chat_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.CSRoomChatMessage.chat_message)
}
inline void CSRoomChatMessage::set_chat_message(const char* value, size_t size) {
  
  chat_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.CSRoomChatMessage.chat_message)
}
inline ::std::string* CSRoomChatMessage::mutable_chat_message() {
  
  // @@protoc_insertion_point(field_mutable:protocol.CSRoomChatMessage.chat_message)
  return chat_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CSRoomChatMessage::release_chat_message() {
  
  return chat_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CSRoomChatMessage::set_allocated_chat_message(::std::string* chat_message) {
  if (chat_message != NULL) {
    
  } else {
    
  }
  chat_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chat_message);
  // @@protoc_insertion_point(field_set_allocated:protocol.CSRoomChatMessage.chat_message)
}

// -------------------------------------------------------------------

// SCRoomChatMessage

// optional int32 player_id = 1;
inline void SCRoomChatMessage::clear_player_id() {
  player_id_ = 0;
}
inline ::google::protobuf::int32 SCRoomChatMessage::player_id() const {
  // @@protoc_insertion_point(field_get:protocol.SCRoomChatMessage.player_id)
  return player_id_;
}
inline void SCRoomChatMessage::set_player_id(::google::protobuf::int32 value) {
  
  player_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.SCRoomChatMessage.player_id)
}

// optional string player_name = 2;
inline void SCRoomChatMessage::clear_player_name() {
  player_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SCRoomChatMessage::player_name() const {
  // @@protoc_insertion_point(field_get:protocol.SCRoomChatMessage.player_name)
  return player_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SCRoomChatMessage::set_player_name(const ::std::string& value) {
  
  player_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.SCRoomChatMessage.player_name)
}
inline void SCRoomChatMessage::set_player_name(const char* value) {
  
  player_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.SCRoomChatMessage.player_name)
}
inline void SCRoomChatMessage::set_player_name(const char* value, size_t size) {
  
  player_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.SCRoomChatMessage.player_name)
}
inline ::std::string* SCRoomChatMessage::mutable_player_name() {
  
  // @@protoc_insertion_point(field_mutable:protocol.SCRoomChatMessage.player_name)
  return player_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SCRoomChatMessage::release_player_name() {
  
  return player_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SCRoomChatMessage::set_allocated_player_name(::std::string* player_name) {
  if (player_name != NULL) {
    
  } else {
    
  }
  player_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), player_name);
  // @@protoc_insertion_point(field_set_allocated:protocol.SCRoomChatMessage.player_name)
}

// optional int32 room_id = 3;
inline void SCRoomChatMessage::clear_room_id() {
  room_id_ = 0;
}
inline ::google::protobuf::int32 SCRoomChatMessage::room_id() const {
  // @@protoc_insertion_point(field_get:protocol.SCRoomChatMessage.room_id)
  return room_id_;
}
inline void SCRoomChatMessage::set_room_id(::google::protobuf::int32 value) {
  
  room_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.SCRoomChatMessage.room_id)
}

// optional string chat_message = 4;
inline void SCRoomChatMessage::clear_chat_message() {
  chat_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SCRoomChatMessage::chat_message() const {
  // @@protoc_insertion_point(field_get:protocol.SCRoomChatMessage.chat_message)
  return chat_message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SCRoomChatMessage::set_chat_message(const ::std::string& value) {
  
  chat_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.SCRoomChatMessage.chat_message)
}
inline void SCRoomChatMessage::set_chat_message(const char* value) {
  
  chat_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.SCRoomChatMessage.chat_message)
}
inline void SCRoomChatMessage::set_chat_message(const char* value, size_t size) {
  
  chat_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.SCRoomChatMessage.chat_message)
}
inline ::std::string* SCRoomChatMessage::mutable_chat_message() {
  
  // @@protoc_insertion_point(field_mutable:protocol.SCRoomChatMessage.chat_message)
  return chat_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SCRoomChatMessage::release_chat_message() {
  
  return chat_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SCRoomChatMessage::set_allocated_chat_message(::std::string* chat_message) {
  if (chat_message != NULL) {
    
  } else {
    
  }
  chat_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chat_message);
  // @@protoc_insertion_point(field_set_allocated:protocol.SCRoomChatMessage.chat_message)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_chat_2eproto__INCLUDED
